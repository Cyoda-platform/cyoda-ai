Instruction
Here's an example of how to map an input to an entity with a JS Nashorn script:

First, find an entity {tender_entity}.

Example input:
 {
        "input": {
            "name": "Construction of New Bridge Project",
            "types": [
                "Infrastructure",
                "Construction"
            ],
            "contactUser": "John Doe",
            "systemAccount": true,
            "date": "2024-03-28",
            "deadlineDate": "2024-05-15",
            "deadlineLengthDays": 48,
            "category": "Public Works",
            "awardedValue": 250000.00,
            "purchaser": "Department of Transportation",
            "notices": [
                {
                    "name": "Notice of Award",
                    "id": "NW20240328001",
                    "sid": "S001",
                    "date": "2024-03-28",
                    "type": "Award",
                    "srcId": "SRC001",
                    "srcUrl": "https://example.com/notice/NW20240328001",
                    "data": "Awarded the contract for the Construction of New Bridge Project to XYZ Construction Company."
                },
                {
                    "name": "Invitation to Bid",
                    "id": "NW20240301001",
                    "sid": "S002",
                    "date": "2024-03-01",
                    "type": "Bid",
                    "srcId": "SRC002",
                    "srcUrl": "https://example.com/notice/NW20240301001",
                    "data": "Inviting bids for the Construction of New Bridge Project. Deadline for submission is April 15, 2024."
                }
            ]
        }
    }

Example tender_entity:
{
  "tender_entity": {
    "name": "string",
    "types": [
      "string"
    ],
    "contactUser": "string",
    "systemAccount": true,
    "date": "string",
    "deadlineDate": "string",
    "deadlineLengthDays": 0,
    "category": "string",
    "awardedValue": 0.0,
    "purchaser": "string",
    "notices": [
      {
        "name": "string",
        "id": "string",
        "sid": "string",
        "date": "string",
        "type": "string",
        "srcId": "string",
        "srcUrl": "string",
        "data": "string"
      }
    ]
  }
}

Then look for all the fields that are semantically close between input and entity.
For example, input and entity have date, deadlineDate, notices in common and other fields.

Let's write Javascript Nashorn script to map input to tender_entity entity
Expected output:
```Javascript
entity.setDate(input.date);
entity.setDeadlineDate(input.deadlineDate);
entity.setDeadlineLengthDays(input.deadlineLengthDays);
entity.setName(input.title);
entity.setCategory(input.category);
entity.setAwardedValue(input.awardedValue);

var notices = [];
var Notice = Java.type('net.cyoda.saas.model.Notice');

// Add notices from input
for (var i = 0; i < input.notices.length; i++) {
    var notice = new Notice();
    notice.setId(input.notices[i].id != null ? input.notices[i].id : 0);
    notice.setDate(input.notices[i].date != null ? input.notices[i].date : "00-00-00");
    notice.setType(input.notices[i].type != null ? input.notices[i].type : "Unknown type");
    notices.push(notice);
}

entity.setNotices(notices);
```
There can be variations in input and entity. Just try to find any relations and map them with a script.