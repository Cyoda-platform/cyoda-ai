Instruction how to produce a mapping for a target entity.
Entity
Here is an example target entity:
{
  "tender_entity": {
    "name": "string",
    "types": [
      "string"
    ],
    "contactUser": "string",
    "systemAccount": true,
    "date": "string",
    "deadlineDate": "string",
    "deadlineLengthDays": 0,
    "category": "string",
    "awardedValue": 0.0,
    "purchaser": "string",
    "notices": [
      {
        "name": "string",
        "id": "string",
        "sid": "string",
        "date": "string",
        "type": "string",
        "srcId": "string",
        "srcUrl": "string",
        "data": "string"
      }
    ]
  }
}

Input
Here is an example data source response which will be used as our input.
{
  "name": "Construction of New Office Building",
  "types": [
    "Construction",
    "Development"
  ],
  "contactUser": "John Doe",
  "systemAccount": true,
  "date": "2024-03-28",
  "deadlineDate": "2024-04-30",
  "deadlineLengthDays": 33,
  "category": "Construction Services",
  "awardedValue": 185000,
  "purchaser": "ABC Corporation",
  "notices": [
    {
      "name": "Pre-Bid Conference",
      "id": "NW20240328002",
      "sid": "S003",
      "date": "2024-03-28",
      "type": "Conference",
      "srcId": "SRC003",
      "srcUrl": "https://example.com/notice/NW20240328002",
      "data": "Pre-bid conference scheduled on March 28th, 2024 at 2:00 PM to discuss project specifications."
    }
  ]
}

Let's map the input to the entity.
We should map attributes from the input to the entity.
Attributes of the input and the entity, which are similar, should be added as entityMappings.columns.
For example, the input attribute "name" (srcColumnPath) is mapped to the entity attribute "name" (dstCyodaColumnPath).
Transformers should be specified for each column, and they should be the same.
Map more advanced relations like arrays with a script ("script").
It is a JavaScript Nashorn script that maps complex relations between input and output.
In our example, notices from the input were mapped to notices of the entity via script and not via columns.

Also, provide a unique timeuuid for DataMappingConfigDto id; give it a randomly unique name as well.
If the input is JSON, dataType should also be JSON.
"srcRelativeRootPath": "root:/" is always like this.
Columns are what you will have to adjust for each input. Use columns for simple mappings and script for complex mappings.
This is how you should do mappings:
For example, a JSON input has a name attribute ("name": "Construction of New Office Building") and the Tender Entity has a name attribute as well.
First, let's find all attribute pairs that are semantically close:
name - name
types - types
and so on.
So, you need to add a column mapping for name:
{
                    "srcColumnPath": "name",
                    "dstCyodaColumnPath": "name",
                    "dstCyodaColumnPathType": "java.lang.String",
                    "dstCollectionElementSetModes": [],
                    "transformer": {
                        "type": "COMPOSITE",
                        "children": [
                            {
                                "type": "SINGLE",
                                "transformerKey": "com.cyoda.plugins.mapping.core.parser.valuetransformers.SourceObjectValueTransformer$ToString",
                                "parameters": []
                            },
                            {
                                "type": "SINGLE",
                                "transformerKey": "com.cyoda.plugins.mapping.core.parser.valuetransformers.StringValueTransformer$Trim",
                                "parameters": []
                            }
                        ]
                    }
                },
Transformers should always be the same for string values. If you don't know what transformer to use - add this transformer:
 "transformer": {
                        "type": "COMPOSITE",
                        "children": []
                    }

You should use script for any complex mappings like arrays. Here notices are mapped with a Javascript Nashorn script like this:

"script": {
                "body": "var notices = [];\nvar Notice = Java.type('net.cyoda.saas.model.Notice');\n\n// Add notices from input\nfor (var i = 0; i < input.notices.length; i++) {\n    var notice = new Notice();\n    notice.setId(input.notices[i].id != null ? input.notices[i].id : 0);\n    notice.setDate(input.notices[i].date != null ? input.notices[i].date : \"00-00-00\");\n    notice.setType(input.notices[i].type != null ? input.notices[i].type : \"Unknown type\");\n    notices.push(notice);\n}\nentity.setNotices(notices);\n",
                "inputSrcPaths": [
                    "notices/*/name",
                    "notices/*/id",
                    "notices/*/sid",
                    "notices/*/date",
                    "notices/*/type",
                    "notices/*/srcId",
                    "notices/*/srcUrl",
                    "notices/*/data"
                ],
                "inputMetaPaths": [],
                "reusableScripts": []
            }

You should adjust everything depending on the input and target entity. Use this instruction only to understand the logic of how to do it. Both the entity and input can vary each time.
For example, it could be a product entity with a different schema and product input.
Always ensure you understand the target entity and the data source input.

Here are the instructions for column mappings:
To generate column mappings from input to entity, first identify all semantically similar attributes between the input and the entity, which have the same hierarchy level in the JSON object and should have the same data type.
For example, let's create column mappings from this input to this entity:

Column mappings
First let's find all attributes pairs that are semantically close
name - name
types - types
contactUser - contact_User
systemAccount - systemAcc
and so on.

For these and all other combinations you need to provide column mappings in the following form:
```
{
                    "srcColumnPath": "name", // input attribute 
                    "dstCyodaColumnPath": "name", // entity attribute 
                    "dstCyodaColumnPathType": "java.lang.String", // entity datatype
                    "dstCollectionElementSetModes": [], // leave the same as here
                    "transformer": { //leave as here
                        "type": "COMPOSITE",
                        "children": [
                        ]
                    }
                }
```

Example output need to be modified for the custom input and entity:
```
{
    "@bean": "com.cyoda.plugins.mapping.core.dtos.DataMappingConfigDto",
    "id": "c784c270-f0fe-11ee-9561-ee157423307a",
    "name": "tender",
    "lastUpdated": 1712069164720,
    "dataType": "JSON",
    "description": "",
    "entityMappings": [
        {
            "id": {
                "id": "c77e59d0-f0fe-11ee-9561-ee157423307a"
            },
            "name": "tender",
            "entityClass": "net.cyoda.saas.model.TenderEntity",
            "entityRelationConfigs": [
                {
                    "srcRelativeRootPath": "root:/"
                }
            ],
            "columns": [
                {
                    "srcColumnPath": "name",
                    "dstCyodaColumnPath": "name",
                    "dstCyodaColumnPathType": "java.lang.String",
                    "dstCollectionElementSetModes": [],
                    "transformer": {
                        "type": "COMPOSITE",
                        "children": [
                            {
                                "type": "SINGLE",
                                "transformerKey": "com.cyoda.plugins.mapping.core.parser.valuetransformers.SourceObjectValueTransformer$ToString",
                                "parameters": []
                            },
                            {
                                "type": "SINGLE",
                                "transformerKey": "com.cyoda.plugins.mapping.core.parser.valuetransformers.StringValueTransformer$Trim",
                                "parameters": []
                            }
                        ]
                    }
                },
                {
                    "srcColumnPath": "contactUser",
                    "dstCyodaColumnPath": "contactUser",
                    "dstCyodaColumnPathType": "java.lang.String",
                    "dstCollectionElementSetModes": [],
                    "transformer": {
                        "type": "COMPOSITE",
                        "children": [
                            {
                                "type": "SINGLE",
                                "transformerKey": "com.cyoda.plugins.mapping.core.parser.valuetransformers.SourceObjectValueTransformer$ToString",
                                "parameters": []
                            },
                            {
                                "type": "SINGLE",
                                "transformerKey": "com.cyoda.plugins.mapping.core.parser.valuetransformers.StringValueTransformer$Trim",
                                "parameters": []
                            }
                        ]
                    }
                },
                {
                    "srcColumnPath": "systemAccount",
                    "dstCyodaColumnPath": "systemAccount",
                    "dstCyodaColumnPathType": "java.lang.Boolean",
                    "dstCollectionElementSetModes": [],
                    "transformer": {
                        "type": "COMPOSITE",
                        "children": []
                    }
                },
                {
                    "srcColumnPath": "date",
                    "dstCyodaColumnPath": "date",
                    "dstCyodaColumnPathType": "java.lang.String",
                    "dstCollectionElementSetModes": [],
                    "transformer": {
                        "type": "COMPOSITE",
                        "children": [
                            {
                                "type": "SINGLE",
                                "transformerKey": "com.cyoda.plugins.mapping.core.parser.valuetransformers.SourceObjectValueTransformer$ToString",
                                "parameters": []
                            },
                            {
                                "type": "SINGLE",
                                "transformerKey": "com.cyoda.plugins.mapping.core.parser.valuetransformers.StringValueTransformer$Trim",
                                "parameters": []
                            }
                        ]
                    }
                },
                {
                    "srcColumnPath": "deadlineDate",
                    "dstCyodaColumnPath": "deadlineDate",
                    "dstCyodaColumnPathType": "java.lang.String",
                    "dstCollectionElementSetModes": [],
                    "transformer": {
                        "type": "COMPOSITE",
                        "children": [
                            {
                                "type": "SINGLE",
                                "transformerKey": "com.cyoda.plugins.mapping.core.parser.valuetransformers.SourceObjectValueTransformer$ToString",
                                "parameters": []
                            },
                            {
                                "type": "SINGLE",
                                "transformerKey": "com.cyoda.plugins.mapping.core.parser.valuetransformers.StringValueTransformer$Trim",
                                "parameters": []
                            }
                        ]
                    }
                },
                {
                    "srcColumnPath": "deadlineLengthDays",
                    "dstCyodaColumnPath": "deadlineLengthDays",
                    "dstCyodaColumnPathType": "java.lang.Integer",
                    "dstCollectionElementSetModes": [],
                    "transformer": {
                        "type": "COMPOSITE",
                        "children": []
                    }
                },
                {
                    "srcColumnPath": "category",
                    "dstCyodaColumnPath": "category",
                    "dstCyodaColumnPathType": "java.lang.String",
                    "dstCollectionElementSetModes": [],
                    "transformer": {
                        "type": "COMPOSITE",
                        "children": [
                            {
                                "type": "SINGLE",
                                "transformerKey": "com.cyoda.plugins.mapping.core.parser.valuetransformers.SourceObjectValueTransformer$ToString",
                                "parameters": []
                            },
                            {
                                "type": "SINGLE",
                                "transformerKey": "com.cyoda.plugins.mapping.core.parser.valuetransformers.StringValueTransformer$Trim",
                                "parameters": []
                            }
                        ]
                    }
                },
                {
                    "srcColumnPath": "purchaser",
                    "dstCyodaColumnPath": "purchaser",
                    "dstCyodaColumnPathType": "java.lang.String",
                    "dstCollectionElementSetModes": [],
                    "transformer": {
                        "type": "COMPOSITE",
                        "children": [
                            {
                                "type": "SINGLE",
                                "transformerKey": "com.cyoda.plugins.mapping.core.parser.valuetransformers.SourceObjectValueTransformer$ToString",
                                "parameters": []
                            },
                            {
                                "type": "SINGLE",
                                "transformerKey": "com.cyoda.plugins.mapping.core.parser.valuetransformers.StringValueTransformer$Trim",
                                "parameters": []
                            }
                        ]
                    }
                },
                {
                    "srcColumnPath": "awardedValue",
                    "dstCyodaColumnPath": "awardedValue",
                    "dstCyodaColumnPathType": "java.lang.Double",
                    "dstCollectionElementSetModes": [],
                    "transformer": {
                        "type": "COMPOSITE",
                        "children": []
                    }
                }
            ],
            "functionalMappings": [],
            "columnPathsForUniqueCheck": [],
            "metadata": [],
            "cobiCoreMetadata": [],
            "script": {
                "body": "var notices = [];\nvar Notice = Java.type('net.cyoda.saas.model.Notice');\n\n// Add notices from input\nfor (var i = 0; i < input.notices.length; i++) {\n    var notice = new Notice();\n    notice.setId(input.notices[i].id != null ? input.notices[i].id : 0);\n    notice.setDate(input.notices[i].date != null ? input.notices[i].date : \"00-00-00\");\n    notice.setType(input.notices[i].type != null ? input.notices[i].type : \"Unknown type\");\n    notices.push(notice);\n}\nentity.setNotices(notices);\n",
                "inputSrcPaths": [
                    "notices/*/name",
                    "notices/*/id",
                    "notices/*/sid",
                    "notices/*/date",
                    "notices/*/type",
                    "notices/*/srcId",
                    "notices/*/srcUrl",
                    "notices/*/data"
                ],
                "inputMetaPaths": [],
                "reusableScripts": []
            },
            "entityFilter": {
                "@bean": "com.cyoda.core.conditions.GroupCondition",
                "operator": "AND",
                "conditions": []
            }
        }
    ]
}
```
There can be variations in the input and the entity. Just try to find any relations and map them.