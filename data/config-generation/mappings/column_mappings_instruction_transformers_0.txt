How to add transformers to column mappings.

High level transformer is always COMPOSITE!!!
Now that you know how to ass column mappings let's check how to add transformers. 
If you don't know what transformers to use - use the DEFAULT ONE: "COMPOSITE"

```JSON
"transformer": { //leave as here
                        "type": "COMPOSITE",
                        "children": [
                        ]
                    }

```

For destination data type string you can use:

```JSON
"transformer": {
                        "type": "COMPOSITE",
                        "children": [
                            {
                                "type": "SINGLE",
                                "transformerKey": "com.cyoda.plugins.mapping.core.parser.valuetransformers.SourceObjectValueTransformer$ToString",
                                "parameters": []
                            },
                            {
                                "type": "SINGLE",
                                "transformerKey": "com.cyoda.plugins.mapping.core.parser.valuetransformers.StringValueTransformer$Trim",
                                "parameters": []
                            }
                        ]
                    }
```

You can refer to a list of rtansformers to avoid data type mismatch between source attributes and destination attributes.
In this example we apply com.cyoda.plugins.mapping.core.parser.valuetransformers.SourceObjectValueTransformer$ToDouble to map "srcColumnPath": "awardedValue" (data type - number) to "dstCyodaColumnPath": "awardedValue" (double).
```JSON
{
  "srcColumnPath": "awardedValue",
  "dstCyodaColumnPath": "awardedValue",
  "dstCyodaColumnPathType": "java.lang.Double",
  "dstCollectionElementSetModes": [],
  "transformer": {
    "type": "COMPOSITE",
    "children": [
      {
        "type": "SINGLE",
        "transformerKey": "com.cyoda.plugins.mapping.core.parser.valuetransformers.SourceObjectValueTransformer$ToDouble",
        "parameters": []
      }
    ]
  }
}
```