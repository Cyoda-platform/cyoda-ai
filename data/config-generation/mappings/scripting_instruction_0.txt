Instruction
Here's an example of how to map an input to an entity with a Javascript Nashorn script:

First, find an entity {tender_entity}.

Example input:
 {
        "input": {
            "name": "Construction of New Bridge Project",
            "types": [
                "Infrastructure",
                "Construction"
            ],
            "contactUser": "John Doe",
            "systemAccount": true,
            "date": "2024-03-28",
            "deadlineDate": "2024-05-15",
            "deadlineLengthDays": 48,
            "category": "Public Works",
            "awardedValue": 250000.00,
            "purchaser": "Department of Transportation",
            "notices": [
                {
                    "name": "Notice of Award",
                    "id": "NW20240328001",
                    "sid": "S001",
                    "date": "2024-03-28",
                    "type": "Award",
                    "srcId": "SRC001",
                    "srcUrl": "https://example.com/notice/NW20240328001",
                    "data": "Awarded the contract for the Construction of New Bridge Project to XYZ Construction Company."
                },
                {
                    "name": "Invitation to Bid",
                    "id": "NW20240301001",
                    "sid": "S002",
                    "date": "2024-03-01",
                    "type": "Bid",
                    "srcId": "SRC002",
                    "srcUrl": "https://example.com/notice/NW20240301001",
                    "data": "Inviting bids for the Construction of New Bridge Project. Deadline for submission is April 15, 2024."
                }
            ]
        }
    }

Example tender_entity:
{
  "tender_entity": {
    "name": "string",
    "types": [
      "string"
    ],
    "contactUser": "string",
    "systemAccount": true,
    "date": "string",
    "deadlineDate": "string",
    "deadlineLengthDays": 0,
    "category": "string",
    "awardedValue": 0.0,
    "purchaser": "string",
    "notices": [
      {
        "name": "string",
        "id": "string",
        "sid": "string",
        "date": "string",
        "type": "string",
        "srcId": "string",
        "srcUrl": "string",
        "data": "string"
      }
    ]
  }
}

Then, identify all fields that are semantically similar between the input and the entity.
For instance, the input and entity share common fields such as date, deadlineDate, notices, and others.

Let's write a JavaScript Nashorn script to map the input to the tender_entity entity.
entity is a predefined object, do NOT initialize "entity".
Pay attention at how arrays are handled. If it is a different object, like Notice in the example.
First you need to initialize Notice.
this is the correct format to initialize a cyoda object.
```Javascript Nashorn
var Notice = Java.type('net.cyoda.saas.model.Notice');
var notice = new Notice();
```
package net.cyoda.saas.model is the same for all classes you do not know.

So, writing a JavaScript Nashorn script to map the given input to given tender_entity entity will result into this output:
Expected output:
```Javascript Nashorn

entity.setDate(input.date);
entity.setDeadlineDate(input.deadlineDate);
entity.setDeadlineLengthDays(input.deadlineLengthDays);
entity.setName(input.title);
entity.setCategory(input.category);
entity.setAwardedValue(input.awardedValue);

var ArrayList = Java.type("java.util.ArrayList");
var notices = new ArrayList();

var Notice = Java.type('net.cyoda.saas.model.Notice');

// Add notices from input
for (var i = 0; i < input.notices.length; i++) {
    var notice = new Notice();
    notice.setId(input.notices[i].id != null ? input.notices[i].id : 0);
    notice.setDate(input.notices[i].date != null ? input.notices[i].date : "00-00-00");
    notice.setType(input.notices[i].type != null ? input.notices[i].type : "Unknown type");
    notices.add(notice);
}

entity.setNotices(notices);
```
#inputSrcPaths
As for inputSrcPaths you should list all paths of input parameters that are used. Also take into account that cyoda inputSrcPaths use a different json path.
#inputSrcPaths for nested objects:
If for example there is input {"purchaser": {"name":"Jim"}} then the inputSrcPaths will be "purchaser/name" and NOT "purchaser.name".
For arrays use wildcrds like notices/*/data.

###inputSrcPaths for nested objects. The correct format for inputSrcPaths for nested objects should be "parentObject/childObject/attribute".
For example, if we have an input object like this:

```json

{
  "purchaser": {
    "name": "ABC Corporation"
  }
}

```
The inputSrcPath for the "name" attribute of the "purchaser" object would be "purchaser/name".

There can be variations in the input and the entity. Just try to find any relations and map them with a script.