{"messages": [{"role": "system", "content": "You are a mapping generation code assistant. \\\nYou are an expert in Javascript Nashorn and understand how it is different from Java and javascript.\nYou will be asked to generate Nashorn javascript code to map input to entity. \\\nFirst, analyse the input and the entity and fill in Mapping Questionnaire.\nThen do your best to do code assistance for mapping the input to the entity."},{"role": "user", "content": "Please map user input \"{ \"healthServiceOrganization\": { \"organizationId\": \"health-004\", \"organizationTitle\": \"Harmony Health Collective\", \"inceptionYear\": 2021, \"officeLocation\": { \"streetAddress\": \"321 Care Blvd\", \"municipality\": \"Calm Valley\", \"province\": \"TX\", \"zip\": \"75004\" }, \"medicalUnits\": [ { \"unitCode\": \"unit-005\", \"unitName\": \"Cardiac Center\", \"chiefDoctor\": { \"physicianId\": \"phys-001\", \"firstName\": \"Liam\", \"lastName\": \"Parker\", \"contactEmail\": \"liam.parker@harmonyhealth.com\", \"phone\": \"+1234567891\" }, \"team\": [ { \"teamMemberId\": \"member-001\", \"fullName\": \"James Smith\", \"positionTitle\": \"Senior Cardiac Nurse\", \"experience\": 10, \"certifications\": [\"CCRN\", \"BLS Certification\"] }, { \"teamMemberId\": \"member-002\", \"fullName\": \"Chris Johnson\", \"positionTitle\": \"Diagnostic Technician\", \"experience\": 4, \"certifications\": [\"ECG Technician\"] } ], \"offeredProcedures\": [ { \"procedureCode\": \"proc-001\", \"procedureName\": \"Comprehensive Cardiac Assessment\", \"price\": 250.00 }, { \"procedureCode\": \"proc-002\", \"procedureName\": \"Holter Monitoring\", \"price\": 0.00 } ] }, { \"unitCode\": \"unit-006\", \"unitName\": \"Child Health Services\", \"chiefDoctor\": { \"physicianId\": \"phys-002\", \"firstName\": \"Olivia\", \"lastName\": \"Robinson\", \"contactEmail\": null, \"phone\": null }, \"team\": [ { \"teamMemberId\": \"member-003\", \"fullName\": \"Sophia Lee\", \"positionTitle\": \"Child Health Specialist\", \"experience\": 7, \"certifications\": [\"Pediatric Nursing Certification\"] }, { \"teamMemberId\": \"member-004\", \"fullName\": \"Noah Williams\", \"positionTitle\": \"Child Psychologist\", \"experience\": 5, \"certifications\": [\"Licensed Psychologist\"] } ], \"offeredProcedures\": [ { \"procedureCode\": \"proc-003\", \"procedureName\": \"Annual Pediatric Exam\", \"price\": 180.00 }, { \"procedureCode\": \"proc-004\", \"procedureName\": \"Developmental Screening\", \"price\": 120.00 } ] } ], \"individualClients\": [ { \"clientId\": \"patient-001\", \"firstName\": \"Jessica\", \"lastName\": \"Taylor\", \"age\": 28, \"sex\": \"Female\", \"healthRecords\": [\"Heart Murmur\", \"Anxiety\"], \"medications\": [\"Beta Blockers\"] }, { \"clientId\": \"patient-002\", \"firstName\": \"Ethan\", \"lastName\": \"Clark\", \"age\": 50, \"sex\": \"Male\", \"healthRecords\": [\"High Blood Pressure\"], \"medications\": [] }, { \"clientId\": \"patient-003\", \"firstName\": \"Chloe\", \"lastName\": \"Miller\", \"age\": 22, \"sex\": \"Female\", \"healthRecords\": [\"Asthma\"], \"medications\": [\"Inhaler\"] }, { \"clientId\": \"patient-004\", \"firstName\": \"Julian\", \"lastName\": \"Brown\", \"age\": 5, \"sex\": \"Male\", \"healthRecords\": [\"Developmental Delays\"], \"medications\": [] } ] } }\"  to the target entity \"{ \"$\": { \".healthcareSystem.systemId\": \"STRING\", \".healthcareSystem.name\": \"STRING\", \".healthcareSystem.establishedYear\": \"INTEGER\", \".healthcareSystem.location.address\": \"STRING\", \".healthcareSystem.location.city\": \"STRING\", \".healthcareSystem.location.state\": \"STRING\", \".healthcareSystem.location.zipCode\": \"STRING\", \"#.healthcareSystem\": \"OBJECT\", \"#.healthcareSystem.location\": \"OBJECT\" }, \"$.healthcareSystem.departments[*]\": { \".departmentId\": \"STRING\", \".departmentName\": \"STRING\", \".head.doctorId\": \"STRING\", \".head.firstName\": \"STRING\", \".head.lastName\": \"STRING\", \".head.email\": \"STRING\", \".head.phone\": \"STRING\", \"#\": \"ARRAY_ELEMENT\", \"#.head\": \"OBJECT\" }, \"$.healthcareSystem.departments[*].staff[*]\": { \".staffId\": \"STRING\", \".fullName\": \"STRING\", \".role\": \"STRING\", \".experienceYears\": \"INTEGER\", \".specializations\": \"NULL\", \".specializations[*]\": \"(STRING x 2)\", \"#\": \"ARRAY_ELEMENT\" }, \"$.healthcareSystem.departments[*].services[*]\": { \".serviceId\": \"STRING\", \".serviceName\": \"STRING\", \".cost\": \"DOUBLE\", \"#\": \"ARRAY_ELEMENT\" }, \"$.healthcareSystem.patients[*]\": { \".patientId\": \"STRING\", \".firstName\": \"STRING\", \".lastName\": \"STRING\", \".age\": \"INTEGER\", \".gender\": \"STRING\", \".currentMedications\": \"NULL\", \".medicalHistory[*]\": \"(STRING x 2)\", \".currentMedications[*]\": \"(STRING x 1)\", \"#\": \"ARRAY_ELEMENT\" } }\" "},{"role": "assistant", "content": "var target = entity.modelAccessor; // Explicitly importing Java ArrayList var ArrayList = Java.type(\"java.util.ArrayList\"); // Mapping scalar fields for healthcare system target.healthcareSystem = { systemId: input.healthServiceOrganization.organizationId != null ? String(input.healthServiceOrganization.organizationId) : \"\", name: input.healthServiceOrganization.organizationTitle != null ? String(input.healthServiceOrganization.organizationTitle) : \"\", establishedYear: input.healthServiceOrganization.inceptionYear != null ? Number(input.healthServiceOrganization.inceptionYear) : 0, location: { address: input.healthServiceOrganization.officeLocation.streetAddress != null ? String(input.healthServiceOrganization.officeLocation.streetAddress) : \"\", city: input.healthServiceOrganization.officeLocation.municipality != null ? String(input.healthServiceOrganization.officeLocation.municipality) : \"\", state: input.healthServiceOrganization.officeLocation.province != null ? String(input.healthServiceOrganization.officeLocation.province) : \"\", zipCode: input.healthServiceOrganization.officeLocation.zip != null ? String(input.healthServiceOrganization.officeLocation.zip) : \"\" }, departments: new ArrayList(), patients: new ArrayList() }; // Handling medical units as departments if (input.healthServiceOrganization.medicalUnits != null) { for (var i = 0; i < input.healthServiceOrganization.medicalUnits.length; i++) { var unitInput = input.healthServiceOrganization.medicalUnits[i]; var department = { departmentId: unitInput.unitCode != null ? String(unitInput.unitCode) : \"\", departmentName: unitInput.unitName != null ? String(unitInput.unitName) : \"\", head: { doctorId: unitInput.chiefDoctor.physicianId != null ? String(unitInput.chiefDoctor.physicianId) : \"\", firstName: unitInput.chiefDoctor.firstName != null ? String(unitInput.chiefDoctor.firstName) : \"\", lastName: unitInput.chiefDoctor.lastName != null ? String(unitInput.chiefDoctor.lastName) : \"\", email: unitInput.chiefDoctor.contactEmail != null ? String(unitInput.chiefDoctor.contactEmail) : \"\", phone: unitInput.chiefDoctor.phone != null ? String(unitInput.chiefDoctor.phone) : \"\" }, staff: new ArrayList(), services: new ArrayList() }; // Handling team members as staff if (unitInput.team != null) { for (var j = 0; j < unitInput.team.length; j++) { var teamMemberInput = unitInput.team[j]; var staffMember = { staffId: teamMemberInput.teamMemberId != null ? String(teamMemberInput.teamMemberId) : \"\", fullName: teamMemberInput.fullName != null ? String(teamMemberInput.fullName) : \"\", role: teamMemberInput.positionTitle != null ? String(teamMemberInput.positionTitle) : \"\", experienceYears: teamMemberInput.experience != null ? Number(teamMemberInput.experience) : 0, specializations: teamMemberInput.certifications ? new ArrayList(teamMemberInput.certifications) : new ArrayList() }; department.staff.add(staffMember); } } // Handling offered procedures as services if (unitInput.offeredProcedures != null) { for (var k = 0; k < unitInput.offeredProcedures.length; k++) { var procedureInput = unitInput.offeredProcedures[k]; var service = { serviceId: procedureInput.procedureCode != null ? String(procedureInput.procedureCode) : \"\", serviceName: procedureInput.procedureName != null ? String(procedureInput.procedureName) : \"\", cost: procedureInput.price != null ? Number(procedureInput.price) : 0.0 }; department.services.add(service); } } target.healthcareSystem.departments.add(department); } } // Handling individual clients as patients if (input.healthServiceOrganization.individualClients != null) { for (var l = 0; l < input.healthServiceOrganization.individualClients.length; l++) { var clientInput = input.healthServiceOrganization.individualClients[l]; var patient = { patientId: clientInput.clientId != null ? String(clientInput.clientId) : \"\", firstName: clientInput.firstName != null ? String(clientInput.firstName) : \"\", lastName: clientInput.lastName != null ? String(clientInput.lastName) : \"\", age: clientInput.age != null ? Number(clientInput.age) : 0, gender: clientInput.sex != null ? String(clientInput.sex) : \"\", medicalHistory: clientInput.healthRecords ? new ArrayList(clientInput.healthRecords) : new ArrayList(), currentMedications: clientInput.medications ? new ArrayList(clientInput.medications) : new ArrayList() }; target.healthcareSystem.patients.add(patient); } }"}]}
{"messages": [{"role": "system", "content": "You are a mapping generation code assistant. \\\nYou are an expert in Javascript Nashorn and understand how it is different from Java and javascript.\nYou will be asked to generate Nashorn javascript code to map input to entity. \\\nFirst, analyse the input and the entity and fill in Mapping Questionnaire.\nThen do your best to do code assistance for mapping the input to the entity."},{"role": "user", "content": "Please map user input \"<?xml version=\"1.0\" encoding=\"UTF-8\"?> <streamingPlatform> <platformId>platform-123</platformId> <platformTitle>FlixHub</platformTitle> <launchDate>2019</launchDate> <isActive>true</isActive> <headquarters> <location>Miami, FL</location> <country>USA</country> </headquarters> <pricingPlans> <pricingPlan> <planId>basic-001</planId> <planName>Starter Pack</planName> <pricePerMonth>8.99</pricePerMonth> <videoQuality>480p</videoQuality> <includedBenefits> <benefit>Ads Present</benefit> <benefit>Access to Basic Library</benefit> </includedBenefits> <planStatus>active</planStatus> </pricingPlan> <pricingPlan> <planId>premium-001</planId> <planName>Full Access</planName> <pricePerMonth>17.99</pricePerMonth> <videoQuality>4K</videoQuality> <includedBenefits> <benefit>No Ads</benefit> <benefit>Exclusive Access to Content</benefit> <benefit>Offline Watching</benefit> </includedBenefits> <planStatus>active</planStatus> </pricingPlan> </pricingPlans> <films> <film> <filmId>movie-001</filmId> <filmTitle>Interstellar</filmTitle> <releaseYear>2014</releaseYear> <categories> <category>Sci-Fi</category> <category>Adventure</category> </categories> <runtimeMinutes>169</runtimeMinutes> <userRating>8.6</userRating> <director> <directorFirstName>Christopher</directorFirstName> <directorLastName>Nolan</directorLastName> </director> <cast> <actor> <actorId>actor-001</actorId> <actorName>Matthew McConaughey</actorName> <character>Cooper</character> </actor> <actor> <actorId>actor-002</actorId> <actorName>Anne Hathaway</actorName> <character>Dr. Brand</character> </actor> </cast> <reviews> <review> <reviewId>rev-001</reviewId> <reviewer>UserXYZ</reviewer> <rating>5</rating> <comment>Incredible visuals and storytelling!</comment> </review> <review> <reviewId>rev-002</reviewId> <reviewer>Cinephile21</reviewer> <rating>4</rating> <comment>A bit long but worth the watch.</comment> </review> </reviews> </film> <film> <filmId>movie-002</filmId> <filmTitle>The Dark Knight Rises</filmTitle> <releaseYear>2012</releaseYear> <categories> <category>Action</category> <category>Thriller</category> </categories> <runtimeMinutes>164</runtimeMinutes> <userRating>8.4</userRating> <director> <directorFirstName>Christopher</directorFirstName> <directorLastName>Nolan</directorLastName> </director> <cast> <actor> <actorId>actor-003</actorId> <actorName>Christian Bale</actorName> <character>Bruce Wayne</character> </actor> <actor> <actorId>actor-004</actorId> <actorName>Tom Hardy</actorName> <character>Bane</character> </actor> </cast> <reviews/> </film> </films> <subscribers> <subscriber> <subscriberId>sub-001</subscriberId> <subscriberUsername>superfan123</subscriberUsername> <subscriberEmail>superfan123@example.com</subscriberEmail> <currentPlan>premium-001</currentPlan> <watchHistory> <filmId>movie-001</filmId> <filmId>movie-002</filmId> </watchHistory> <accountCreationDate>2020-03-15</accountCreationDate> </subscriber> <subscriber> <subscriberId>sub-002</subscriberId> <subscriberUsername>casualViewer</subscriberUsername> <subscriberEmail>casualview@example.com</subscriberEmail> <currentPlan>basic-001</currentPlan> <watchHistory/> <accountCreationDate>2021-08-22</accountCreationDate> </subscriber> </subscribers> </streamingPlatform>\"  to the target entity \"{ \"$\": { \".streamingService.serviceId\": \"STRING\", \".streamingService.name\": \"STRING\", \".streamingService.majorLaunchYear\": \"INTEGER\", \".streamingService.isActive\": \"BOOLEAN\", \".streamingService.location.headquarters\": \"STRING\", \".streamingService.location.country\": \"STRING\", \"#.streamingService\": \"OBJECT\", \"#.streamingService.location\": \"OBJECT\" }, \"$.streamingService.subscriptionPlans[*]\": { \".planId\": \"STRING\", \".planName\": \"STRING\", \".monthlyFee\": \"DOUBLE\", \".resolution\": \"STRING\", \".isActive\": \"BOOLEAN\", \".features[*]\": \"(STRING x 3)\", \"#\": \"ARRAY_ELEMENT\" }, \"$.streamingService.movies[*]\": { \".movieId\": \"STRING\", \".title\": \"STRING\", \".releaseYear\": \"INTEGER\", \".durationMinutes\": \"INTEGER\", \".rating\": \"DOUBLE\", \".director.firstName\": \"STRING\", \".director.lastName\": \"STRING\", \".genre[*]\": \"(STRING x 2)\", \"#\": \"ARRAY_ELEMENT\", \"#.director\": \"OBJECT\" }, \"$.streamingService.movies[*].cast[*]\": { \".actorId\": \"STRING\", \".fullName\": \"STRING\", \".role\": \"STRING\", \"#\": \"ARRAY_ELEMENT\" }, \"$.streamingService.movies[*].reviews[*]\": { \".reviewId\": \"STRING\", \".user\": \"STRING\", \".rating\": \"INTEGER\", \".comment\": \"STRING\", \"#\": \"ARRAY_ELEMENT\" }, \"$.streamingService.users[*]\": { \".userId\": \"STRING\", \".username\": \"STRING\", \".email\": \"STRING\", \".subscriptionPlan\": \"STRING\", \".accountCreated\": \"LOCAL_DATE\", \".watchHistory[*]\": \"(STRING x 2)\", \"#\": \"ARRAY_ELEMENT\" } }\" "},{"role": "assistant", "content": "var target = entity.modelAccessor; target.streamingService = {}; // Mapping scalar fields target.streamingService.serviceId = input.streamingPlatform.platformId != null ? String(input.streamingPlatform.platformId) : \"\"; target.streamingService.name = input.streamingPlatform.platformTitle != null ? String(input.streamingPlatform.platformTitle) : \"\"; target.streamingService.majorLaunchYear = input.streamingPlatform.launchDate != null ? parseInt(input.streamingPlatform.launchDate) : 0; target.streamingService.isActive = input.streamingPlatform.isActive != null ? (input.streamingPlatform.isActive === 'true') : false; target.streamingService.location = { headquarters: input.streamingPlatform.headquarters.location != null ? String(input.streamingPlatform.headquarters.location) : \"\", country: input.streamingPlatform.headquarters.country != null ? String(input.streamingPlatform.headquarters.country) : \"\" }; // Handling subscription plans var ArrayList = Java.type(\"java.util.ArrayList\"); var subscriptionPlansList = new ArrayList(); if (input.streamingPlatform.pricingPlans.pricingPlan != null) { for (var i = 0; i < input.streamingPlatform.pricingPlans.pricingPlan.length; i++) { var plan = { planId: input.streamingPlatform.pricingPlans.pricingPlan[i].planId != null ? String(input.streamingPlatform.pricingPlans.pricingPlan[i].planId) : \"\", planName: input.streamingPlatform.pricingPlans.pricingPlan[i].planName != null ? String(input.streamingPlatform.pricingPlans.pricingPlan[i].planName) : \"\", monthlyFee: input.streamingPlatform.pricingPlans.pricingPlan[i].pricePerMonth != null ? parseFloat(input.streamingPlatform.pricingPlans.pricingPlan[i].pricePerMonth) : 0.0, resolution: input.streamingPlatform.pricingPlans.pricingPlan[i].videoQuality != null ? String(input.streamingPlatform.pricingPlans.pricingPlan[i].videoQuality) : \"\", isActive: input.streamingPlatform.pricingPlans.pricingPlan[i].planStatus != null ? (input.streamingPlatform.pricingPlans.pricingPlan[i].planStatus === 'active') : false, features: new ArrayList() }; if (input.streamingPlatform.pricingPlans.pricingPlan[i].includedBenefits.benefit != null) { for (var j = 0; j < input.streamingPlatform.pricingPlans.pricingPlan[i].includedBenefits.benefit.length; j++) { plan.features.add(String(input.streamingPlatform.pricingPlans.pricingPlan[i].includedBenefits.benefit[j])); } } subscriptionPlansList.add(plan); } } target.streamingService.subscriptionPlans = subscriptionPlansList; // Handling movies var moviesList = new ArrayList(); if (input.streamingPlatform.films.film != null) { for (var k = 0; k < input.streamingPlatform.films.film.length; k++) { var movie = { movieId: input.streamingPlatform.films.film[k].filmId != null ? String(input.streamingPlatform.films.film[k].filmId) : \"\", title: input.streamingPlatform.films.film[k].filmTitle != null ? String(input.streamingPlatform.films.film[k].filmTitle) : \"\", releaseYear: input.streamingPlatform.films.film[k].releaseYear != null ? parseInt(input.streamingPlatform.films.film[k].releaseYear) : 0, durationMinutes: input.streamingPlatform.films.film[k].runtimeMinutes != null ? parseInt(input.streamingPlatform.films.film[k].runtimeMinutes) : 0, rating: input.streamingPlatform.films.film[k].userRating != null ? parseFloat(input.streamingPlatform.films.film[k].userRating) : 0.0, director: { firstName: input.streamingPlatform.films.film[k].director.directorFirstName != null ? String(input.streamingPlatform.films.film[k].director.directorFirstName) : \"\", lastName: input.streamingPlatform.films.film[k].director.directorLastName != null ? String(input.streamingPlatform.films.film[k].director.directorLastName) : \"\" }, genre: new ArrayList() }; if (input.streamingPlatform.films.film[k].categories.category != null) { for (var l = 0; l < input.streamingPlatform.films.film[k].categories.category.length; l++) { movie.genre.add(String(input.streamingPlatform.films.film[k].categories.category[l])); } } // Handling cast movie.cast = new ArrayList(); if (input.streamingPlatform.films.film[k].cast.actor != null) { for (var m = 0; m < input.streamingPlatform.films.film[k].cast.actor.length; m++) { var actor = { actorId: input.streamingPlatform.films.film[k].cast.actor[m].actorId != null ? String(input.streamingPlatform.films.film[k].cast.actor[m].actorId) : \"\", fullName: input.streamingPlatform.films.film[k].cast.actor[m].actorName != null ? String(input.streamingPlatform.films.film[k].cast.actor[m].actorName) : \"\", role: input.streamingPlatform.films.film[k].cast.actor[m].character != null ? String(input.streamingPlatform.films.film[k].cast.actor[m].character) : \"\" }; movie.cast.add(actor); } } // Handling reviews movie.reviews = new ArrayList(); if (input.streamingPlatform.films.film[k].reviews.review != null) { for (var n = 0; n < input.streamingPlatform.films.film[k].reviews.review.length; n++) { var review = { reviewId: input.streamingPlatform.films.film[k].reviews.review[n].reviewId != null ? String(input.streamingPlatform.films.film[k].reviews.review[n].reviewId) : \"\", user: input.streamingPlatform.films.film[k].reviews.review[n].reviewer != null ? String(input.streamingPlatform.films.film[k].reviews.review[n].reviewer) : \"\", rating: input.streamingPlatform.films.film[k].reviews.review[n].rating != null ? parseInt(input.streamingPlatform.films.film[k].reviews.review[n].rating) : 0, comment: input.streamingPlatform.films.film[k].reviews.review[n].comment != null ? String(input.streamingPlatform.films.film[k].reviews.review[n].comment) : \"\" }; movie.reviews.add(review); } } moviesList.add(movie); } } target.streamingService.movies = moviesList; // Handling users var usersList = new ArrayList(); if (input.streamingPlatform.subscribers.subscriber != null) { for (var o = 0; o < input.streamingPlatform.subscribers.subscriber.length; o++) { var user = { userId: input.streamingPlatform.subscribers.subscriber[o].subscriberId != null ? String(input.streamingPlatform.subscribers.subscriber[o].subscriberId) : \"\", username: input.streamingPlatform.subscribers.subscriber[o].subscriberUsername != null ? String(input.streamingPlatform.subscribers.subscriber[o].subscriberUsername) : \"\", email: input.streamingPlatform.subscribers.subscriber[o].subscriberEmail != null ? String(input.streamingPlatform.subscribers.subscriber[o].subscriberEmail) : \"\", subscriptionPlan: input.streamingPlatform.subscribers.subscriber[o].currentPlan != null ? String(input.streamingPlatform.subscribers.subscriber[o].currentPlan) : \"\", accountCreated: input.streamingPlatform.subscribers.subscriber[o].accountCreationDate != null ? String(input.streamingPlatform.subscribers.subscriber[o].accountCreationDate) : \"\", watchHistory: new ArrayList() }; if (input.streamingPlatform.subscribers.subscriber[o].watchHistory.filmId != null) { for (var p = 0; p < input.streamingPlatform.subscribers.subscriber[o].watchHistory.filmId.length; p++) { user.watchHistory.add(String(input.streamingPlatform.subscribers.subscriber[o].watchHistory.filmId[p])); } } usersList.add(user); } } target.streamingService.users = usersList;"}]}
{"messages": [{"role": "system", "content": "You are a mapping generation code assistant. \\\nYou are an expert in Javascript Nashorn and understand how it is different from Java and javascript.\nYou will be asked to generate Nashorn javascript code to map input to entity. \\\nFirst, analyse the input and the entity and fill in Mapping Questionnaire.\nThen do your best to do code assistance for mapping the input to the entity."},{"role": "user", "content": "Please map user input \"libraryId,libraryName,location,city,state,zip,foundingYear,bookId,bookTitle,publicationYear,isbn,availableCopies,authorId,authorName,birthYear,deathYear,genre,borrowerId,patronName,email,phone,checkoutDate,returnDate,transactionId,transactionType,transactionStatus lib-001,Central City Library,123 Book St,Booktown,CA,90210,1985,book-001,The Great Gatsby,1925,9780743273565,3,author-001,F. Scott Fitzgerald,1896,1940.0,\"Fiction, Classic\",borrower-001,John Doe,john.doe@example.com,+1234567890,2024-01-10,2024-01-20,trans-001,borrow,completed lib-001,Central City Library,123 Book St,Booktown,CA,90210,1985,book-002,1984,1949,9780451524935,0,author-002,George Orwell,1903,1950.0,\"Fiction, Dystopian\",borrower-002,Jane Smith,jane.smith@example.com,+0987654321,,,,, lib-001,Central City Library,123 Book St,Booktown,CA,90210,1985,book-003,Sapiens: A Brief History of Humankind,2011,9780099590088,5,author-003,Yuval Noah Harari,1976,,\"Non-Fiction, History\",,,,,,,,,\"  to the target entity \"{ \"$\": { \".libraryManagementSystem.libraryId\": \"STRING\", \".libraryManagementSystem.name\": \"STRING\", \".libraryManagementSystem.location.address\": \"STRING\", \".libraryManagementSystem.location.city\": \"STRING\", \".libraryManagementSystem.location.state\": \"STRING\", \".libraryManagementSystem.location.zipCode\": \"STRING\", \".libraryManagementSystem.establishedYear\": \"INTEGER\", \"#.libraryManagementSystem\": \"OBJECT\", \"#.libraryManagementSystem.location\": \"OBJECT\" }, \"$.libraryManagementSystem.books[*]\": { \".bookId\": \"STRING\", \".title\": \"STRING\", \".publishedYear\": \"INTEGER\", \".isbn\": \"STRING\", \".copiesAvailable\": \"INTEGER\", \".genre[*]\": \"(STRING x 2)\", \"#\": \"ARRAY_ELEMENT\" }, \"$.libraryManagementSystem.books[*].authors[*]\": { \".authorId\": \"STRING\", \".name\": \"STRING\", \".birthYear\": \"INTEGER\", \".deathYear\": \"INTEGER\", \"#\": \"ARRAY_ELEMENT\" }, \"$.libraryManagementSystem.borrowers[*]\": { \".borrowerId\": \"STRING\", \".fullName\": \"STRING\", \".email\": \"STRING\", \".phone\": \"STRING\", \"#\": \"ARRAY_ELEMENT\" }, \"$.libraryManagementSystem.borrowers[*].borrowedBooks[*]\": { \".bookId\": \"STRING\", \".borrowDate\": \"LOCAL_DATE\", \".returnDate\": \"LOCAL_DATE\", \"#\": \"ARRAY_ELEMENT\" }, \"$.libraryManagementSystem.transactions[*]\": { \".transactionId\": \"STRING\", \".borrowerId\": \"STRING\", \".bookId\": \"STRING\", \".transactionDate\": \"LOCAL_DATE\", \".transactionType\": \"STRING\", \".status\": \"STRING\", \"#\": \"ARRAY_ELEMENT\" } }\" "},{"role": "assistant", "content": "var target = entity.modelAccessor; // Access the target entity model target.libraryManagementSystem = {}; // Initialize the libraryManagementSystem object // Mapping scalar fields target.libraryManagementSystem.libraryId = input.libraryId != null ? String(input.libraryId) : \"\"; target.libraryManagementSystem.name = input.libraryName != null ? String(input.libraryName) : \"\"; target.libraryManagementSystem.location = { address: input.location != null ? String(input.location) : \"\", city: input.city != null ? String(input.city) : \"\", state: input.state != null ? String(input.state) : \"\", zipCode: input.zip != null ? String(input.zip) : \"\" }; target.libraryManagementSystem.establishedYear = input.foundingYear != null ? parseInt(input.foundingYear) : 0; // Handling books var ArrayList = Java.type(\"java.util.ArrayList\"); var booksList = new ArrayList(); var bookEntries = [ { bookId: input.bookId, bookTitle: input.bookTitle, publishedYear: input.publicationYear, isbn: input.isbn, copiesAvailable: input.availableCopies, authorId: input.authorId, authorName: input.authorName, authorBirthYear: input.birthYear, authorDeathYear: input.deathYear, genre: input.genre } ]; for (var i = 0; i < bookEntries.length; i++) { var book = bookEntries[i]; var authorsList = new ArrayList(); if (book.authorId != null) { var author = { authorId: book.authorId != null ? String(book.authorId) : \"\", name: book.authorName != null ? String(book.authorName) : \"\", birthYear: book.authorBirthYear != null ? parseInt(book.authorBirthYear) : 0, deathYear: book.authorDeathYear != null ? parseInt(book.authorDeathYear) : null }; authorsList.add(author); } var genreList = new ArrayList(); if (book.genre != null) { var genres = book.genre.split(\"; \"); for (var j = 0; j < genres.length; j++) { genreList.add(String(genres[j].trim())); } } booksList.add({ bookId: book.bookId != null ? String(book.bookId) : \"\", title: book.bookTitle != null ? String(book.bookTitle) : \"\", publishedYear: book.publishedYear != null ? parseInt(book.publishedYear) : 0, isbn: book.isbn != null ? String(book.isbn) : \"\", copiesAvailable: book.copiesAvailable != null ? parseInt(book.copiesAvailable) : 0, authors: authorsList, genre: genreList }); } target.libraryManagementSystem.books = booksList; // Handling borrowers var borrowersList = new ArrayList(); var borrowerEntries = [ { borrowerId: input.borrowerId, fullName: input.patronName, email: input.email, phone: input.phone, borrowedBooks: [ { bookId: input.bookId, borrowDate: input.checkoutDate, returnDate: input.returnDate } ] } ]; for (var k = 0; k < borrowerEntries.length; k++) { var borrower = borrowerEntries[k]; var borrowedBooksList = new ArrayList(); if (borrower.borrowedBooks) { for (var m = 0; m < borrower.borrowedBooks.length; m++) { var borrowedBook = borrower.borrowedBooks[m]; borrowedBooksList.add({ bookId: borrowedBook.bookId != null ? String(borrowedBook.bookId) : \"\", borrowDate: borrowedBook.borrowDate != null && borrowedBook.borrowDate !== \"\" ? String(borrowedBook.borrowDate) : null, returnDate: borrowedBook.returnDate != null && borrowedBook.returnDate !== \"\" ? String(borrowedBook.returnDate) : null }); } } borrowersList.add({ borrowerId: borrower.borrowerId != null ? String(borrower.borrowerId) : \"\", fullName: borrower.fullName != null ? String(borrower.fullName) : \"\", email: borrower.email != null ? String(borrower.email) : \"\", phone: borrower.phone != null ? String(borrower.phone) : \"\", borrowedBooks: borrowedBooksList }); } target.libraryManagementSystem.borrowers = borrowersList; // Handling transactions var transactionsList = new ArrayList(); var transactionEntries = [ { transactionId: input.transactionId, borrowerId: input.borrowerId, bookId: input.bookId, transactionDate: input.checkoutDate, transactionType: input.transactionType, status: input.transactionStatus } ]; for (var l = 0; l < transactionEntries.length; l++) { var transaction = transactionEntries[l]; transactionsList.add({ transactionId: transaction.transactionId != null ? String(transaction.transactionId) : \"\", borrowerId: transaction.borrowerId != null ? String(transaction.borrowerId) : \"\", bookId: transaction.bookId != null ? String(transaction.bookId) : \"\", transactionDate: transaction.transactionDate != null && transaction.transactionDate !== \"\" ? String(transaction.transactionDate) : null, transactionType: transaction.transactionType != null ? String(transaction.transactionType) : \"\", status: transaction.status != null ? String(transaction.status) : \"\" }); } target.libraryManagementSystem.transactions = transactionsList;"}]}
{"messages": [{"role": "system", "content": "You are a mapping generation code assistant. \\\nYou are an expert in Javascript Nashorn and understand how it is different from Java and javascript.\nYou will be asked to generate Nashorn javascript code to map input to entity. \\\nFirst, analyse the input and the entity and fill in Mapping Questionnaire.\nThen do your best to do code assistance for mapping the input to the entity."},{"role": "user", "content": "Please map user input \"<internationalSymposium> <symposiumId>conf-001</symposiumId> <titleText>International Technology Summit</titleText> <organizationalYear>2024</organizationalYear> <centralTheme>Advancing Global Innovations</centralTheme> <locale> <facility>Tech Convention Center</facility> <urbanArea>San Francisco</urbanArea> <region>USA</region> </locale> <timeframe> <startPoint>2024-09-15</startPoint> <finishPoint>2024-09-18</finishPoint> </timeframe> <recurrent>true</recurrent> <discussionTopics> <topic>Artificial Intelligence</topic> <topic>Cybersecurity</topic> <topic>Blockchain</topic> </discussionTopics> <programs> <briefing> <briefingId>session-001</briefingId> <discussionTitle>AI in Everyday Life</discussionTitle> <speakerContributor> <contributorId>speaker-001</contributorId> <foreName>Alice</foreName> <surname>Nguyen</surname> <organisation>Tech Innovations Corp</organisation> </speakerContributor> <sessionStart>2024-09-15T10:00</sessionStart> <sessionDuration>90 minutes</sessionDuration> <additionalNotes> <note>AI impact on daily applications</note> </additionalNotes> </briefing> </programs> <registrants> <individual> <identifier>attendee-001</identifier> <contactTitle>John Doe</contactTitle> <emailAddress>john.doe@example.com</emailAddress> <registeredBriefings> <briefingId>session-001</briefingId> </registeredBriefings> </individual> </registrants> <financialSupport> <backer> <backerId>sponsor-001</backerId> <backerName>Tech Corp</backerName> <supportLevel>Gold</supportLevel> </backer> </financialSupport> </internationalSymposium>ternationalSymposium.symposiumId != null ? String(input.internationalSymposium.symposiumId) : \"\"; target.conference.name = input.internationalSymposium.titleText != null ? String(input.internationalSymposium.titleText) : \"\"; target.conference.year = input.internationalSymposium.organizationalYear != null ? parseInt(input.internationalSymposium.organizationalYear) : 0; target.conference.theme = input.internationalSymposium.centralTheme != null ? String(input.internationalSymposium.centralTheme) : \"\"; target.conference.location = { venue: input.internationalSymposium.locale.facility != null ? String(input.internationalSymposium.locale.facility) : \"\", city: input.internationalSymposium.locale.urbanArea != null ? String(input.internationalSymposium.locale.urbanArea) : \"\", country: input.internationalSymposium.locale.region != null ? String(input.internationalSymposium.locale.region) : \"\" }; target.conference.dates = { start: input.internationalSymposium.timeframe.startPoint != null ? String(input.internationalSymposium.timeframe.startPoint) : \"\", end: input.internationalSymposium.timeframe.finishPoint != null ? String(input.internationalSymposium.timeframe.finishPoint) : \"\" }; target.conference.isAnnual = input.internationalSymposium.recurrent != null ? Boolean(input.internationalSymposium.recurrent) : false; // Handling topics var ArrayList = Java.type(\"java.util.ArrayList\"); var topicsList = new ArrayList(); if (input.internationalSymposium.discussionTopics.topic != null) { var discussionTopicsArray = input.internationalSymposium.discussionTopics.topic; for (var i = 0; i < discussionTopicsArray.length; i++) { topicsList.add(String(discussionTopicsArray[i])); } } target.conference.topics = topicsList; // Handling presentations var ArrayList = Java.type(\"java.util.ArrayList\"); var sessionsList = new ArrayList(); if (input.internationalSymposium.programs.briefing != null) { var briefingArray = [input.internationalSymposium.programs.briefing]; for (var j = 0; j < briefingArray.length; j++) { var briefing = briefingArray[j]; var session = { sessionId: briefing.briefingId != null ? String(briefing.briefingId) : \"\", sessionTitle: briefing.discussionTitle != null ? String(briefing.discussionTitle) : \"\", speaker: { speakerId: briefing.speakerContributor.contributorId != null ? String(briefing.speakerContributor.contributorId) : \"\", firstName: briefing.speakerContributor.foreName != null ? String(briefing.speakerContributor.foreName) : \"\", lastName: briefing.speakerContributor.surname != null ? String(briefing.speakerContributor.surname) : \"\", affiliation: briefing.speakerContributor.organisation != null ? String(briefing.speakerContributor.organisation) : \"\" }, time: briefing.sessionStart != null ? String(briefing.sessionStart) : \"\", duration: briefing.sessionDuration != null ? String(briefing.sessionDuration) : \"\" }; sessionsList.add(session); } } target.conference.sessions = sessionsList; // Handling participants var ArrayList = Java.type(\"java.util.ArrayList\"); var attendeesList = new ArrayList(); if (input.internationalSymposium.registrants.individual != null) { var individualArray = [input.internationalSymposium.registrants.individual]; for (var k = 0; k < individualArray.length; k++) { var individual = individualArray[k]; var attendee = { attendeeId: individual.identifier != null ? String(individual.identifier) : \"\", name: individual.contactTitle != null ? String(individual.contactTitle) : \"\", email: individual.emailAddress != null ? String(individual.emailAddress) : \"\", registeredSessions: new ArrayList()  // Initialize as an ArrayList }; // Ensure we add to the registeredSessions list if (individual.registeredBriefings.briefingId != null) { attendee.registeredSessions.add(String(individual.registeredBriefings.briefingId)); // Use add to populate the list } attendeesList.add(attendee); } } target.conference.attendees = attendeesList; // Handling sponsors var ArrayList = Java.type(\"java.util.ArrayList\"); var sponsorsList = new ArrayList(); if (input.internationalSymposium.financialSupport.backer != null) { var backerArray = [input.internationalSymposium.financialSupport.backer]; for (var l = 0; l < backerArray.length; l++) { var backer = backerArray[l]; var sponsor = { sponsorId: backer.backerId != null ? String(backer.backerId) : \"\", name: backer.backerName != null ? String(backer.backerName) : \"\", tier: backer.supportLevel != null ? String(backer.supportLevel) : \"\" }; sponsorsList.add(sponsor); } } target.conference.sponsors = sponsorsList;\"  to the target entity \"{ \"$\": { \".conference.conferenceId\": \"STRING\", \".conference.name\": \"STRING\", \".conference.year\": \"INTEGER\", \".conference.theme\": \"STRING\", \".conference.location.venue\": \"STRING\", \".conference.location.city\": \"STRING\", \".conference.location.country\": \"STRING\", \".conference.dates.start\": \"LOCAL_DATE\", \".conference.dates.end\": \"LOCAL_DATE\", \".conference.isAnnual\": \"BOOLEAN\", \".conference.topics[*]\": \"(STRING x 3)\", \"#.conference\": \"OBJECT\", \"#.conference.location\": \"OBJECT\", \"#.conference.dates\": \"OBJECT\" }, \"$.conference.sessions[*]\": { \".sessionId\": \"STRING\", \".sessionTitle\": \"STRING\", \".speaker.speakerId\": \"STRING\", \".speaker.firstName\": \"STRING\", \".speaker.lastName\": \"STRING\", \".speaker.affiliation\": \"STRING\", \".time\": \"LOCAL_DATE_TIME\", \".duration\": \"STRING\", \"#\": \"ARRAY_ELEMENT\", \"#.speaker\": \"OBJECT\" }, \"$.conference.attendees[*]\": { \".attendeeId\": \"STRING\", \".name\": \"STRING\", \".email\": \"STRING\", \".registeredSessions[*]\": \"(STRING x 1)\", \"#\": \"ARRAY_ELEMENT\" }, \"$.conference.sponsors[*]\": { \".sponsorId\": \"STRING\", \".name\": \"STRING\", \".tier\": \"STRING\", \"#\": \"ARRAY_ELEMENT\" } }\" "},{"role": "assistant", "content": "var target = entity.modelAccessor; target.conference = {}; // Mapping scalar fields target.conference.conferenceId = input.internationalSymposium.symposiumId != null ? String(input.internationalSymposium.symposiumId) : \"\"; target.conference.name = input.internationalSymposium.titleText != null ? String(input.internationalSymposium.titleText) : \"\"; target.conference.year = input.internationalSymposium.organizationalYear != null ? parseInt(input.internationalSymposium.organizationalYear) : 0; target.conference.theme = input.internationalSymposium.centralTheme != null ? String(input.internationalSymposium.centralTheme) : \"\"; target.conference.location = { venue: input.internationalSymposium.locale.facility != null ? String(input.internationalSymposium.locale.facility) : \"\", city: input.internationalSymposium.locale.urbanArea != null ? String(input.internationalSymposium.locale.urbanArea) : \"\", country: input.internationalSymposium.locale.region != null ? String(input.internationalSymposium.locale.region) : \"\" }; target.conference.dates = { start: input.internationalSymposium.timeframe.startPoint != null ? String(input.internationalSymposium.timeframe.startPoint) : \"\", end: input.internationalSymposium.timeframe.finishPoint != null ? String(input.internationalSymposium.timeframe.finishPoint) : \"\" }; target.conference.isAnnual = input.internationalSymposium.recurrent != null ? Boolean(input.internationalSymposium.recurrent) : false; // Handling topics var ArrayList = Java.type(\"java.util.ArrayList\"); var topicsList = new ArrayList(); if (input.internationalSymposium.discussionTopics.topic != null) { var discussionTopicsArray = input.internationalSymposium.discussionTopics.topic; for (var i = 0; i < discussionTopicsArray.length; i++) { topicsList.add(String(discussionTopicsArray[i])); } } target.conference.topics = topicsList; // Handling presentations var ArrayList = Java.type(\"java.util.ArrayList\"); var sessionsList = new ArrayList(); if (input.internationalSymposium.programs.briefing != null) { var briefingArray = [input.internationalSymposium.programs.briefing]; for (var j = 0; j < briefingArray.length; j++) { var briefing = briefingArray[j]; var session = { sessionId: briefing.briefingId != null ? String(briefing.briefingId) : \"\", sessionTitle: briefing.discussionTitle != null ? String(briefing.discussionTitle) : \"\", speaker: { speakerId: briefing.speakerContributor.contributorId != null ? String(briefing.speakerContributor.contributorId) : \"\", firstName: briefing.speakerContributor.foreName != null ? String(briefing.speakerContributor.foreName) : \"\", lastName: briefing.speakerContributor.surname != null ? String(briefing.speakerContributor.surname) : \"\", affiliation: briefing.speakerContributor.organisation != null ? String(briefing.speakerContributor.organisation) : \"\" }, time: briefing.sessionStart != null ? String(briefing.sessionStart) : \"\", duration: briefing.sessionDuration != null ? String(briefing.sessionDuration) : \"\" }; sessionsList.add(session); } } target.conference.sessions = sessionsList; // Handling participants var ArrayList = Java.type(\"java.util.ArrayList\"); var attendeesList = new ArrayList(); if (input.internationalSymposium.registrants.individual != null) { var individualArray = [input.internationalSymposium.registrants.individual]; for (var k = 0; k < individualArray.length; k++) { var individual = individualArray[k]; var attendee = { attendeeId: individual.identifier != null ? String(individual.identifier) : \"\", name: individual.contactTitle != null ? String(individual.contactTitle) : \"\", email: individual.emailAddress != null ? String(individual.emailAddress) : \"\", registeredSessions: new ArrayList()  // Initialize as an ArrayList }; // Ensure we add to the registeredSessions list if (individual.registeredBriefings.briefingId != null) { attendee.registeredSessions.add(String(individual.registeredBriefings.briefingId)); // Use add to populate the list } attendeesList.add(attendee); } } target.conference.attendees = attendeesList; // Handling sponsors var ArrayList = Java.type(\"java.util.ArrayList\"); var sponsorsList = new ArrayList(); if (input.internationalSymposium.financialSupport.backer != null) { var backerArray = [input.internationalSymposium.financialSupport.backer]; for (var l = 0; l < backerArray.length; l++) { var backer = backerArray[l]; var sponsor = { sponsorId: backer.backerId != null ? String(backer.backerId) : \"\", name: backer.backerName != null ? String(backer.backerName) : \"\", tier: backer.supportLevel != null ? String(backer.supportLevel) : \"\" }; sponsorsList.add(sponsor); } } target.conference.sponsors = sponsorsList;"}]}
{"messages": [{"role": "system", "content": "You are a mapping generation code assistant. \\\nYou are an expert in Javascript Nashorn and understand how it is different from Java and javascript.\nYou will be asked to generate Nashorn javascript code to map input to entity. \\\nFirst, analyse the input and the entity and fill in Mapping Questionnaire.\nThen do your best to do code assistance for mapping the input to the entity."},{"role": "user", "content": "Please map user input \"institutionId,collegeName,address,city,state,zipPostalCode,deptCode,departmentName,courseCode,courseTitle,creditsEarned,studentIdentifier,studentFullName,enrollmentID,academicTerm,assignmentID,assignmentTitle,dueDate,gradeID,scoreObtained,feedbackProvided uni-001,Global University,456 Campus Way,Knowledge City,CA,94016,dept-001,Computer Science,course-001,Introduction to Programming,3,student-001,Alice Johnson,enroll-001,Spring 2024,assign-001,Project 1,2024-05-01,grade-001,95,Excellent work! uni-001,Global University,456 Campus Way,Knowledge City,CA,94016,dept-001,Computer Science,course-001,Introduction to Programming,3,student-001,Alice Johnson,enroll-001,Spring 2024,assign-001,Project 1,2024-05-01,grade-002,88,\"Good effort, but could improve coding style\" uni-001,Global University,456 Campus Way,Knowledge City,CA,94016,dept-001,Computer Science,course-001,Introduction to Programming,3,student-002,Bob Smith,enroll-002,Spring 2024,assign-002,Project 1,2024-05-01,grade-003,85,\"Good job, but make sure to test your code\" uni-001,Global University,456 Campus Way,Knowledge City,CA,94016,dept-002,Mathematics,course-002,Calculus I,4,student-003,Carol Davis,enroll-003,Spring 2024,assign-003,Calculus Homework 1,2024-02-15,grade-004,90,Great effort on the homework! org-123,Acme University,789 Main St,Innovation City,TX,75001,dept-003,Engineering,course-004,Robotics Fundamentals,4,student-004,John Doe,enroll-004,Fall 2024,assign-004,Robotics Project,2024-11-30,grade-005,92,\"Excellent project, well done!\" lab-456,Research Institute,321 Science Blvd,Discovery Town,NY,10011,dept-004,Physics,course-005,Quantum Mechanics,3,student-005,Jane Smith,enroll-005,Summer 2024,assign-005,Quantum Lab Report,2024-08-15,grade-006,88,\"Good report, but needs more analysis\" tech-789,Innovation Labs,159 Tech Park,Startup City,CA,90210,dept-005,Computer Vision,course-006,Machine Learning,4,student-006,Mike Johnson,enroll-006,Winter 2024,assign-006,ML Algorithm Implementation,2024-02-28,grade-007,95,\"Outstanding work, very innovative!\"\"  to the target entity \"{ \"$\": { \".university.universityId\": \"STRING\", \".university.name\": \"STRING\", \".university.location.address\": \"STRING\", \".university.location.city\": \"STRING\", \".university.location.state\": \"STRING\", \".university.location.zipCode\": \"STRING\", \"#.university\": \"OBJECT\", \"#.university.location\": \"OBJECT\" }, \"$.university.departments[*]\": { \".departmentId\": \"STRING\", \".departmentName\": \"STRING\", \"#\": \"ARRAY_ELEMENT\" }, \"$.university.departments[*].courses[*]\": { \".courseId\": \"STRING\", \".courseName\": \"STRING\", \".credits\": \"INTEGER\", \"#\": \"ARRAY_ELEMENT\" }, \"$.university.departments[*].courses[*].students[*]\": { \".studentId\": \"STRING\", \".fullName\": \"STRING\", \"#\": \"ARRAY_ELEMENT\" }, \"$.university.departments[*].courses[*].students[*].enrollments[*]\": { \".enrollmentId\": \"STRING\", \".semester\": \"STRING\", \"#\": \"ARRAY_ELEMENT\" }, \"$.university.departments[*].courses[*].students[*].enrollments[*].assignments[*]\": { \".assignmentId\": \"STRING\", \".assignmentName\": \"STRING\", \".dueDate\": \"LOCAL_DATE\", \"#\": \"ARRAY_ELEMENT\" }, \"$.university.departments[*].courses[*].students[*].enrollments[*].assignments[*].grades[*]\": { \".gradeId\": \"STRING\", \".score\": \"INTEGER\", \".feedback\": \"STRING\", \"#\": \"ARRAY_ELEMENT\" } }\" "},{"role": "assistant", "content": "var target = entity.modelAccessor; target.university = {}; // Mapping scalar fields target.university.universityId = input.institutionId != null ? input.institutionId : \"\"; target.university.name = input.collegeName != null ? input.collegeName : \"\"; target.university.location = { address: input.address != null ? input.address : \"\", city: input.city != null ? input.city : \"\", state: input.state != null ? input.state : \"\", zipCode: input.zipPostalCode != null ? input.zipPostalCode : \"\" }; // Handling departments var ArrayList = Java.type(\"java.util.ArrayList\"); var departmentsList = new ArrayList(); var departmentMap = {}; if (input.deptCode != null) { departmentMap[input.deptCode] = { departmentId: input.deptCode, departmentName: input.departmentName != null ? input.departmentName : \"\", courses: new ArrayList() }; } var courseMap = {}; if (input.courseCode != null) { courseMap[input.courseCode] = { courseId: input.courseCode, courseName: input.courseTitle != null ? input.courseTitle : \"\", credits: input.creditsEarned != null ? parseInt(input.creditsEarned) : 0, students: new ArrayList() }; } // Handling students var studentMap = {}; if (input.studentIdentifier != null) { studentMap[input.studentIdentifier] = { studentId: input.studentIdentifier, fullName: input.studentFullName != null ? input.studentFullName : \"\", enrollments: new ArrayList() }; } // Handling enrollments var enrollment = { enrollmentId: input.enrollmentID != null ? input.enrollmentID : \"\", semester: input.academicTerm != null ? input.academicTerm : \"\", assignments: new ArrayList() }; // Handling assignments var assignment = { assignmentId: input.assignmentID != null ? input.assignmentID : \"\", assignmentName: input.assignmentTitle != null ? input.assignmentTitle : \"\", dueDate: input.dueDate != null ? input.dueDate : \"\", grades: new ArrayList() }; // Handling grades var grade = { gradeId: input.gradeID != null ? input.gradeID : \"\", score: input.scoreObtained != null ? parseInt(input.scoreObtained) : 0, feedback: input.feedbackProvided != null ? input.feedbackProvided : \"\" }; assignment.grades.add(grade); enrollment.assignments.add(assignment); studentMap[input.studentIdentifier].enrollments.add(enrollment); courseMap[input.courseCode].students.add(studentMap[input.studentIdentifier]); departmentMap[input.deptCode].courses.add(courseMap[input.courseCode]); // Finalizing the departments list for (var dept in departmentMap) { departmentsList.add(departmentMap[dept]); } target.university.departments = departmentsList;"}]}
