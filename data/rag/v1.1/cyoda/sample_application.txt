#Generate Cyoda design, based on the requirement: "i need very simple job entity that sends hello world email every day at 5 pm". Do not forget to explicitly add the entities that you add in the workflow processors, and use only lowercase underscore for namings. Add workflow only where necessary. If the entity is saved in the workflow of another entity (e.g. JOB) then its source will be ENTITY_EVENT.
"entity/app_design.json":
        {
            "entities": [
                {
                    "entity_name": "send_hello_world_email_job",
                    "entity_type": "JOB",
                    "entity_source": "SCHEDULED",
                    "depends_on_entity": "None",
                    "entity_workflow": {
                        "name": "send_hello_world_email_workflow",
                        "class_name": "com.cyoda.tdb.model.treenode.TreeNodeEntity",
                        "transitions": [
                            {
                                "name": "scheduled_email_job",
                                "description": "Triggered by a schedule to send a 'Hello World' email.",
                                "start_state": "None",
                                "start_state_description": "Initial state before the email is sent.",
                                "end_state": "email_sent",
                                "end_state_description": "Email has been successfully sent.",
                                "process": {
                                    "name": "send_email_process",
                                    "description": "Process to send 'Hello World' email at 5 PM every day.",
                                    "adds_new_entites": "email_entity"
                                }
                            }
                        ]
                    }
                },
                {
                    "entity_name": "email_entity",
                    "entity_type": "EXTERNAL_SOURCES_PUSH_BASED_RAW_DATA",
                    "entity_source": "ENTITY_EVENT",
                    "depends_on_entity": "send_hello_world_email_job",
                    "entity_workflow": {
                        "name": "email_entity_workflow",
                        "class_name": "com.cyoda.tdb.model.treenode.TreeNodeEntity",
                        "transitions": []
                    }
                }
            ]
        }

"entity/email_entity/email_entity":
        #Generate example data json (data model) for entity {entity.get("entity_name")}. This is NOT related to entity design and should be random sample data that can be mock data returned from a datasource or data that reflects business logic or the data that is specified by the user. Base your answer on the user input if any:
        "entity/email_entity/email_entity.json":
                {
                    "$schema": "http://json-schema.org/draft-07/schema#",
                    "title": "Entity data",
                    "entity": {
                        "email_id": "12345",
                        "recipient": "example@example.com",
                        "subject": "Hello World",
                        "body": "This is a test email to demonstrate the email entity.",
                        "sent_timestamp": "2023-10-10T17:00:00Z",
                        "status": "SENT",
                        "attachments": [
                            {
                                "file_name": "attachment1.txt",
                                "file_type": "text/plain",
                                "file_size": 1024
                            },
                            {
                                "file_name": "attachment2.pdf",
                                "file_type": "application/pdf",
                                "file_size": 2048
                            }
                        ]
                    }
                }


"entity/send_hello_world_email_job":
        #Generate example data json (data model) for entity {entity.get("entity_name")}. This is NOT related to entity design and should be random sample data that can be mock data returned from a datasource or data that reflects business logic or the data that is specified by the user. Base your answer on the user input if any:
        "entity/send_hello_world_email_job.json":
                {
                    "$schema": "http://json-schema.org/draft-07/schema#",
                    "title": "Entity data",
                    "entity": {
                        "job_id": "job_20231010",
                        "status": "scheduled",
                        "scheduled_time": "2023-10-10T17:00:00Z",
                        "email_details": {
                            "recipient": "recipient@example.com",
                            "subject": "Hello World from Cyoda",
                            "body": "This is a test email to demonstrate the functionality of the job.",
                            "attachments": [
                                {
                                    "file_name": "example_attachment.txt",
                                    "file_type": "text/plain",
                                    "file_size": 512
                                }
                            ]
                        },
                        "created_timestamp": "2023-10-01T12:00:00Z",
                        "last_modified_timestamp": "2023-10-10T16:00:00Z",
                        "error_count": 0,
                        "execution_details": {
                            "start_time": null,
                            "end_time": null,
                            "execution_status": "pending"
                        }
                    }
                }

        #"Generate the processor functions for {entity.get('entity_name')} call public functions by the name of each processor: {', '.join([transition.get('process', {}).get('name', '') for transition in entity.get('entity_workflow', {}).get('transitions', [])])}. "
        # Reuse functions that are available in the code base, including logic.app_init import entity_service, connections.py and any other existing function that is related to your purpose."
        # Make sure you include logic to save any dependant entities: {', '.join([transition.get('process', {}).get('adds_new_entites', '') for transition in entity.get('entity_workflow', {}).get('transitions', [])])}."
        # Also generate tests with mocks for external services or functions so that the user can try out the functions right away in isolated environment."
        # {entity.get('entity_name')}. Based on the user suggestions if there are any. "
        #Example response should be like {{\"code\": \"all code here\"}} where code has a string value, not an object!"
        "entity/send_hello_world_email_job/workflow/workflow.py":
                import logging
                import unittest
                from unittest.mock import patch
                from common.config.config import ENTITY_VERSION
                from common.app_init import entity_service

                logging.basicConfig(level=logging.INFO)
                logger = logging.getLogger(__name__)


                def send_email_process(meta, data):
                    logger.info("Starting process to send email.")
                    try:
                        email_details = data["entity"]["email_details"]
                        # Simulate sending email (you can integrate with your email service)
                        logger.info(
                            f"Sending email to {email_details['recipient']} with subject: {email_details['subject']}"
                        )
                        # Assume email sent successfully, now save email_entity
                        email_entity_data = {
                            "email_id": "12345",
                            "recipient": email_details["recipient"],
                            "subject": email_details["subject"],
                            "body": email_details["body"],
                            "sent_timestamp": "2023-10-10T17:00:00Z",
                            "status": "SENT",
                            "attachments": email_details["attachments"],
                        }
                        entity_service.add_item(
                            meta["token"], "email_entity", ENTITY_VERSION, email_entity_data
                        )
                        logger.info("Email entity saved successfully.")
                    except Exception as e:
                        logger.error(f"Error in send_email_process: {e}")
                        raise


                # Test example with mocks
                class TestSendEmailProcess(unittest.TestCase):
                #This is correct mock, common.app_init.entity_service without .add_item will not work!
                    @patch("common.app_init.entity_service.add_item")
                    def test_send_email_process(self, mock_entity_service):
                        mock_entity_service.return_value = None
                        meta = {"token": "test_token"}
                        data = {
                            "entity": {
                                "email_details": {
                                    "recipient": "recipient@example.com",
                                    "subject": "Hello World",
                                    "body": "This is a test email.",
                                    "attachments": [],
                                }
                            }
                        }
                        send_email_process(meta, data)
                        mock_entity_service.assert_called_once()


                # Uncomment the line below to run the tests when this script is executed directly
                if __name__ == '__main__':
                     unittest.main()

        #Generate the scheduler file for {entity.get("entity_name")}  based on the user suggestions if there are any, if not you can proceed. Example response should be like {{\"code\": \"all code here\"}} where code has a string value, not an object! This function should save a job entity with data model $data to cyoda. Besides, it should not do any logic. Also generate tests with mocks for external services or functions so that the user can try out the functions right away in isolated environment. User says: ",
        "entity/send_hello_world_email_job/logic.py":
                import logging

                from common.auth.auth import authenticate
                from common.config.config import ENTITY_VERSION
                from common.service.entity_service_interface import EntityService
                from common.app_init import entity_service

                logging.basicConfig(level=logging.INFO)
                logger = logging.getLogger(__name__)


                class SendHelloWorldEmailJobScheduler:
                    def __init__(self, entity_service: EntityService):
                        self.entity_service = entity_service

                    def schedule_job(self, token: str, data: dict) -> dict:
                        # Save a job entity with data model $data to cyoda
                        job_entity = self.entity_service.add_item(
                            token, "send_hello_world_email_job", ENTITY_VERSION, data
                        )
                        return job_entity



                #Test Code
                import unittest
                from unittest.mock import MagicMock


                class TestSendHelloWorldEmailJobScheduler(unittest.TestCase):
                    def setUp(self):
                        self.mock_service = MagicMock(spec=EntityService)
                        self.scheduler = SendHelloWorldEmailJobScheduler(self.mock_service)

                    def test_schedule_job(self):
                        token = "my_token"
                        test_data = {
                            "job_id": "job_20231010",
                            "status": "scheduled",
                            "scheduled_time": "2023-10-10T17:00:00Z",
                            "email_details": {
                                "recipient": "recipient@example.com",
                                "subject": "Hello World from Cyoda",
                                "body": "This is a test email to demonstrate the functionality of the job.",
                                "attachments": [
                                    {
                                        "file_name": "example_attachment.txt",
                                        "file_type": "text/plain",
                                        "file_size": 512,
                                    }
                                ],
                            },
                            "created_timestamp": "2023-10-01T12:00:00Z",
                            "last_modified_timestamp": "2023-10-10T16:00:00Z",
                            "error_count": 0,
                            "execution_details": {
                                "start_time": None,
                                "end_time": None,
                                "execution_status": "pending",
                            },
                        }
                        self.mock_service.add_item.return_value = test_data

                        result = self.scheduler.schedule_job(token, test_data)

                        self.mock_service.add_item.assert_called_once_with(
                            token, "send_hello_world_email_job", ENTITY_VERSION, test_data
                        )
                        self.assertEqual(result, test_data)


                if __name__ == "__main__":
                   unittest.main()










