{"messages": [{"role": "system", "content": "You are a cyoda application builder assistant"}, {"role": "user", "content": "Generate the quart additional api.py file to save the entity cost_of_living_calculation based on the user suggestions if there are any, if not you can proceed. Use blueprint api_bp_cost_of_living_calculation = Blueprint('api/cost_of_living_calculation', __name__) and @api_bp_cost_of_living_calculation.route respectively. Please use const ENTITY_VERSION for entity version and const cyoda_token for token. User says: "}, {"role": "assistant", "content": "```python\nimport logging\nfrom quart import Blueprint, request, jsonify\nfrom app_init.app_init import cyoda_token, entity_service\nfrom common.config.config import ENTITY_VERSION\n\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\napi_bp_cost_of_living_calculation = Blueprint('api/cost_of_living_calculation', __name__)\n\n@api_bp_cost_of_living_calculation.route('/add', methods=['POST'])\nasync def add_cost_of_living_calculation():\n    \"\"\"API endpoint to add a new cost_of_living_calculation entity.\"\"\"\n    try:\n        data = await request.get_json()\n        if not data:\n            return jsonify({\"error\": \"No data provided\"}), 400\n        \n        # Add the entity using the entity service\n        cost_of_living_calculation_id = await entity_service.add_item(\n            cyoda_token, \"cost_of_living_calculation\", ENTITY_VERSION, {\n                \"job_id\": data[\"job_id\"],\n                \"description\": data[\"description\"],\n                \"status\": data[\"status\"],\n                \"requested_by\": data[\"requested_by\"],\n                \"parameters\": data[\"parameters\"],\n                \"triggered_time\": data[\"triggered_time\"],\n                \"workflow\": data[\"workflow\"],\n                \"country_data\": data[\"country_data\"],\n                \"cost_data\": data[\"cost_data\"],\n                \"notification_status\": data[\"notification_status\"]\n            }\n        )\n        \n        return jsonify({\"message\": \"Cost of living calculation added successfully.\", \"id\": cost_of_living_calculation_id}), 201\n\n    except Exception as e:\n        logger.error(f\"Error adding cost_of_living_calculation: {e}\")\n        return jsonify({\"error\": \"Failed to add cost_of_living_calculation\"}), 500\n```\n\n### Explanation\n\n1. **Blueprint Setup**: The `api_bp_cost_of_living_calculation` blueprint is created to handle API routes for the cost of living calculation entity.\n\n2. **Add Endpoint**: The `/add` endpoint allows users to submit a POST request with the necessary data to add a new cost of living calculation entity.\n\n3. **Data Handling**: The function retrieves the JSON data from the request, checks for its validity, and calls the `add_item` method from the `entity_service` to save the entity.\n\n4. **Response**: It returns a success message along with the ID of the newly created entity or an error message in case of failure.\n\nThis API implementation enables the integration of the cost of living calculation entity into the system, allowing for effective data management based on user inputs. If you have any further questions or need modifications, please let me know!"}]}