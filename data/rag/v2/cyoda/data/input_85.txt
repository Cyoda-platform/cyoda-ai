{"messages": [{"role": "system", "content": "You are a cyoda application builder assistant"}, {"role": "user", "content": "Generate Cyoda design json, based on the complete prd {\\\"Here\\\\'s the complete Product Requirements Document (PRD) for the Cyoda-based application focusing on the authors app. This document outlines the design, requirements, workflows, and related diagrams necessary for the successful implementation of the project.\\n---\\n# Product Requirements Document (PRD) for Authors App\\n## Introduction\\nThis document presents the PRD for the Cyoda-based application designed to manage and retrieve author information from the Authors API. The application aims to provide users with a seamless experience in accessing details about authors and their related books. This PRD outlines the entities involved, workflows, and the overall architecture of the application.\\n## Goals and Objectives\\n- To develop an application that integrates with the Authors API to retrieve author details.\\n- To enable users to manage their favorite books associated with specific authors.\\n- To implement a robust event-driven architecture using Cyoda to ensure scalability and efficiency.\\n## Key Features\\n- **Data Retrieval**: The application will retrieve author records from the Authors API based on user requests.\\n- **Management of Favorite Books**: Users will be able to view and manage their favorite books linked to the authors.\\n- **Automated Workflows**: The event-driven architecture will automate the workflows necessary for data processing and retrieval.\\n## Entities Overview\\n### 1. Authors Entity\\n- **Description**: Represents the authors retrieved from the Authors API.\\n- **Example Data Model JSON**:\\nentity_type: JOB\\nentity_source: API_REQUEST\\n- \\n  ```json\\n  {\\n    \\\"authors\\\": [\\n      {\\n        \\\"id\\\": 1,\\n        \\\"title\\\": \\\"Book 1\\\",\\n        \\\"description\\\": \\\"Lorem ipsum dolor sit amet...\\\"\\n      },\\n      {\\n        \\\"id\\\": 2,\\n        \\\"title\\\": \\\"Book 2\\\",\\n        \\\"description\\\": \\\"Ut enim ad minim veniam...\\\"\\n      }\\n    ]\\n  }\\n  ```\\n### 2. Favorite Books Entity\\n- **Description**: Represents the user\\\\'s favorite books associated with specific authors.\\n- **Example Data Model JSON**:\\nentity_type: SECONDARY_DATA\\nentity_source: ENTITY_EVENT\\n ```json\\n  {\\n    \\\"favourite_books\\\": [\\n      {\\n        \\\"user_id\\\": 1,\\n        \\\"book_id\\\": 2,\\n        \\\"collection_of_favourite_books\\\": [\\n          {\\n            \\\"id\\\": 2,\\n            \\\"title\\\": \\\"Book 2\\\",\\n            \\\"description\\\": \\\"Ut enim ad minim veniam...\\\"\\n          }\\n        ]\\n      },\\n      {\\n        \\\"user_id\\\": 2,\\n        \\\"book_id\\\": 1,\\n        \\\"collection_of_favourite_books\\\": [\\n          {\\n            \\\"id\\\": 1,\\n            \\\"title\\\": \\\"Book 1\\\",\\n            \\\"description\\\": \\\"Lorem ipsum dolor sit amet...\\\"\\n          }\\n        ]\\n      }\\n    ]\\n  }\\n  ```\\n## Entities Diagram\\n```mermaid\\ngraph TD\\n    A[Authors Entity] -->|retrieves| B[Favorite Books Entity]\\n```\\n## Workflows and Flowcharts\\n### Workflow for the Authors Entity\\n```mermaid\\nflowchart TD\\n  A[Initial State: Start of the process to retrieve authors.] -->|transition: retrieve_authors, processor: retrieve_authors_process| B[Processing State: Authors have been retrieved successfully.]\\n  B -->|transition: process_authors, processor: process_authors_data| C[End State: Workflow processing is complete.]\\n```\\n## Conclusion\\nThe PRD outlines the necessary components and workflows for the Cyoda-based authors app. By integrating with the Authors API and utilizing an event-driven architecture, the application aims to provide a user-friendly experience for managing author information and related favorite books. This document will serve as a guide for the development and implementation phases, ensuring that the project meets its objectives effectively.\\n\\\"\n}. Use only lowercase underscore for namings. If the entity is saved in the workflow of another entity then its source will be ENTITY_EVENT. The JOB entity_source defaults to API_REQUEST. Prefer entity source/type mentioned in the prd, if it is unclear default to API_REQUEST or ENTITY_EVENT for secondary data. Avoid scheduler unless specified explicitly. You should not change entities or their workflows. You should not omit or add entities which are not listed in the prd. You should follow the complete prd 100% as it was confirmed.. Use this json schema http://json-schema.org/draft-07/schema# to understand how to structure your answer: {'$schema': 'http://json-schema.org/draft-07/schema#', 'title': 'Cyoda design', 'type': 'object', 'properties': {'entities': {'type': 'array', 'items': {'type': 'object', 'properties': {'entity_name': {'type': 'string'}, 'entity_type': {'type': 'string', 'enum': ['JOB', 'EXTERNAL_SOURCES_PULL_BASED_RAW_DATA', 'WEB_SCRAPING_PULL_BASED_RAW_DATA', 'TRANSACTIONAL_PULL_BASED_RAW_DATA', 'EXTERNAL_SOURCES_PUSH_BASED_RAW_DATA', 'WEB_SCRAPING_PUSH_BASED_RAW_DATA', 'TRANSACTIONAL_PUSH_BASED_RAW_DATA', 'SECONDARY_DATA', 'UTIL', 'CONFIG', 'BUSINESS_ENTITY']}, 'entity_source': {'type': 'string', 'enum': ['API_REQUEST', 'SCHEDULED', 'ENTITY_EVENT']}, 'depends_on_entity': {'type': 'string'}, 'entity_workflow': {'type': 'object', 'properties': {'name': {'type': 'string'}, 'class_name': {'type': 'string', 'enum': ['com.cyoda.tdb.model.treenode.TreeNodeEntity']}, 'transitions': {'type': 'array', 'items': {'type': 'object', 'properties': {'name': {'type': 'string'}, 'description': {'type': 'string'}, 'start_state': {'type': 'string'}, 'start_state_description': {'type': 'string'}, 'end_state': {'type': 'string'}, 'end_state_description': {'type': 'string'}, 'process': {'type': 'object', 'properties': {'name': {'type': 'string'}, 'description': {'type': 'string'}, 'adds_new_entites': {'type': 'string'}}, 'required': ['name', 'description', 'adds_new_entites']}}, 'required': ['name', 'start_state', 'end_state', 'process']}}}, 'required': ['name', 'class_name', 'transitions']}}, 'required': ['entity_name', 'entity_type', 'entity_source', 'depends_on_entity', 'entity_workflow']}}}, 'required': ['entities']}. It will be validated against this schema. Return only json (python dictionary)"}, {"role": "assistant", "content": "```json\n{\n  \"entities\": [\n    {\n      \"entity_name\": \"authors_entity\",\n      \"entity_type\": \"JOB\",\n      \"entity_source\": \"API_REQUEST\",\n      \"depends_on_entity\": \"None\",\n      \"entity_workflow\": {\n        \"name\": \"authors_entity_workflow\",\n        \"class_name\": \"com.cyoda.tdb.model.treenode.TreeNodeEntity\",\n        \"transitions\": [\n          {\n            \"name\": \"retrieve_authors\",\n            \"description\": \"Transition to retrieve authors from the Authors API.\",\n            \"start_state\": \"initial_state\",\n            \"start_state_description\": \"Start of the process to retrieve authors.\",\n            \"end_state\": \"authors_retrieved\",\n            \"end_state_description\": \"Authors have been successfully retrieved.\",\n            \"process\": {\n              \"name\": \"retrieve_authors_process\",\n              \"description\": \"Process responsible for fetching authors from the API.\",\n              \"adds_new_entites\": \"authors_entity\"\n            }\n          },\n          {\n            \"name\": \"process_authors\",\n            \"description\": \"Process the retrieved authors to format and store them.\",\n            \"start_state\": \"authors_retrieved\",\n            \"start_state_description\": \"Authors have been retrieved successfully.\",\n            \"end_state\": \"end_state\",\n            \"end_state_description\": \"Workflow processing is complete.\",\n            \"process\": {\n              \"name\": \"process_authors_data\",\n              \"description\": \"Process to handle the raw data of authors.\",\n              \"adds_new_entites\": \"None\"\n            }\n          }\n        ]\n      }\n    },\n    {\n      \"entity_name\": \"favourite_books_entity\",\n      \"entity_type\": \"SECONDARY_DATA\",\n      \"entity_source\": \"ENTITY_EVENT\",\n      \"depends_on_entity\": \"authors_entity\",\n      \"entity_workflow\": {\n        \"name\": \"favourite_books_entity_workflow\",\n        \"class_name\": \"com.cyoda.tdb.model.treenode.TreeNodeEntity\",\n        \"transitions\": []\n      }\n    }\n  ]\n}\n```"}]}