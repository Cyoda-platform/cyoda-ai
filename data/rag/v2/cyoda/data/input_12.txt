{"messages": [{"role": "system", "content": "You are a cyoda application builder assistant"}, {"role": "user", "content": "Generate the scheduler file for flight_search_job  based on the user suggestions if there are any, if not you can proceed. This function should save a job entity with data model $data to cyoda. Besides, it should not do any logic. Also generate main function with entry point so that the user can do end-to-end test. User says: : I've already provided all the necessary details in the session context"}, {"role": "assistant", "content": "```python\nimport logging\nimport asyncio\nfrom app_init.app_init import entity_service\nfrom common.config.config import ENTITY_VERSION\n\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\nasync def schedule_flight_search_job(data):\n    \"\"\"Schedule a flight search job and save the job entity.\"\"\"\n    logger.info(\"Scheduling flight search job.\")\n    \n    try:\n        # Save the job entity to Cyoda\n        job_entity_id = await entity_service.add_item(\n            token=data[\"token\"],\n            entity_model=\"flight_search_job\",\n            entity_version=ENTITY_VERSION,\n            entity=data\n        )\n        \n        logger.info(f\"Flight search job scheduled successfully with ID: {job_entity_id}\")\n    except Exception as e:\n        logger.error(f\"Error scheduling flight search job: {e}\")\n        raise\n\ndef main():\n    # Example data model for the job entity\n    job_data = {\n        \"job_id\": \"job_001\",\n        \"user_id\": \"user_123\",\n        \"departure_airport\": \"JFK\",\n        \"arrival_airport\": \"LAX\",\n        \"travel_dates\": {\n            \"departure_date\": \"2023-12-01\",\n            \"return_date\": \"2023-12-10\"\n        },\n        \"number_of_passengers\": 2,\n        \"search_status\": \"in_progress\",\n        \"searched_at\": \"2023-10-01T10:00:00Z\",\n        \"results\": {\n            \"flights_found\": 0,\n            \"flights\": []\n        },\n        \"error\": None,\n        \"notification_sent\": False,\n        \"summary\": {\n            \"description\": \"This job represents a user-initiated search for flights based on specified criteria.\",\n            \"created_at\": \"2023-10-01T10:00:00Z\"\n        },\n        \"token\": \"test_token\"  # Add the necessary token for authentication\n    }\n    \n    # Run the scheduling function\n    asyncio.run(schedule_flight_search_job(job_data))\n\nif __name__ == \"__main__\":\n    main()\n``` \n\n### Explanation of the Code\n\n1. **`schedule_flight_search_job` Function**:\n   - This asynchronous function is responsible for scheduling the flight search job.\n   - It takes a `data` parameter containing the job entity's details.\n   - The function logs the process and saves the job entity to Cyoda using the `entity_service.add_item` method.\n\n2. **`main` Function**:\n   - This function acts as the entry point for the script.\n   - It defines an example data model representing the job entity to be saved, including necessary parameters such as departure and arrival airports, travel dates, and the user ID.\n   - It calls the `schedule_flight_search_job` function to perform the job scheduling.\n\n3. **Entry Point**:\n   - The script checks if it is being run directly and calls the `main` function to initiate the scheduling process. \n\nThis scheduler file allows for an end-to-end test of the flight search job scheduling, ensuring that the job is saved in the Cyoda system without implementing any additional business logic."}]}