{"messages": [{"role": "system", "content": "You are a cyoda application builder assistant"}, {"role": "user", "content": "Please, generate the processor functions for order_entity call public functions by the name of each processor: process_order, send_notification.  Reuse functions that are available in the code base, including logic.app_init import entity_service, connections.py (ingest_data public function) and any other existing function that is related to your purpose. Make sure you include logic to save any dependant entities: order_entity, notification_entity. Also generate tests with mocks for external services or functions so that the user can try out the functions right away in isolated environment. **Tests should be in the same file with the code**order_entity. Based on the user suggestions if there are any.  Please make sure you are re-using all raw_data_*/connections/connection.py ingest_data functions. This is very important not to re-implement ingest_data but reuse it. You should import and reuse all ingest_data functions, use 'as' to avoid names duplicates. Make sure the result of data ingestion is saved to the corresponding raw data entity. Please also make sure that you understand that argument 'data' that you pass to each function corresponds to entity/order_entity/order_entity.json data and not to any other entity! User says: "}, {"role": "assistant", "content": "\"import logging\\ from app_init.app_init import entity_service\\ from common.config.config import ENTITY_VERSION\\ logging.basicConfig(level=logging.INFO)\\ logger = logging.getLogger()\\ async def process_order(meta, data):\\ \\\"\\\"\\\"Process to handle order placement and save order details.\\\"\\\"\\\"\\ logger.info(\\\"Starting the order processing.\\\")\\ try:\\ # Prepare the order entity based on the incoming data.\\ order_entity_data = {\\ \\\"order_id\\\": \\\"O001\\\",\\ \\\"user_id\\\": data[\\\"user_id\\\"],\\ \\\"shop_id\\\": data[\\\"shop_id\\\"],\\ \\\"ordered_pizza\\\": {\\ \\\"item_id\\\": data[\\\"pizza_selection\\\"][\\\"item_id\\\"],\\ \\\"name\\\": \\\"Cheese Pizza\\\",\\ \\\"description\\\": \\\"Classic cheese pizza with tomato sauce and mozzarella.\\\",\\ \\\"price\\\": 9.99,\\ \\\"available_sizes\\\": [\\\"Small\\\", \\\"Medium\\\", \\\"Large\\\"],\\ \\\"toppings\\\": data[\\\"pizza_selection\\\"][\\\"customizations\\\"][\\\"toppings\\\"]\\ }]}\\ \\\"status\\\": \\\"Confirmed\\\",\\ \\\"timestamp\\\": \\\"2023-10-01T10:00:00Z\\\",\\ \\\"request_parameters\\\": {\\ \\\"user_id\\\": data[\\\"user_id\\\"],\\ \\\"shop_id\\\": data[\\\"shop_id\\\"],\\ \\\"pizza_selection\\\": {\\ \\\"item_id\\\": data[\\\"pizza_selection\\\"][\\\"item_id\\\"],\\ \\\"quantity\\\": 1,\\ \\\"customizations\\\": data[\\\"pizza_selection\\\"][\\\"customizations\\\"]\\ }\\ }\\ }\\ # Save the order entity using the entity service.\\ order_entity_id = await entity_service.add_item(\\ meta[\\\"token\\\"], \\\"order_entity\\\", ENTITY_VERSION, order_entity_data\\ )\\ data[\\\"order_entity\\\"] = {\\\"technical_id\\\": order_entity_id}\\ logger.info(f\\\"Order entity saved successfully with ID: {order_entity_id}\\\")\\ except Exception as e:\\ logger.error(f\\\"Error in process_order: {e}\\\")\\ raise\\ async def send_notification(meta, data):\\ \\\"\\\"\\\"Send a notification to the user about the order status.\\\"\\\"\\\"\\ logger.info(\\\"Preparing to send notification.\\\")\\ try:\\ notification_entity_data = {\\ \\\"notification_id\\\": \\\"N001\\\",\\ \\\"user_id\\\": data[\\\"user_id\\\"],\\ \\\"order_id\\\": data[\\\"order_entity\\\"][\\\"technical_id\\\"],\\ \\\"message\\\": \\\"Your order for Cheese Pizza has been confirmed!\\\",\\ \\\"timestamp\\\": \\\"2023-10-01T10:05:00Z\\\",\\ \\\"status\\\": \\\"sent\\\",\\ \\\"notification_type\\\": \\\"order_confirmation\\\",\\ \\\"details\\\": {\\ \\\"order_summary\\\": {\\ \\\"item_id\\\": data[\\\"ordered_pizza\\\"][\\\"item_id\\\"],\\ \\\"name\\\": data[\\\"ordered_pizza\\\"][\\\"name\\\"],\\ \\\"price\\\": data[\\\"ordered_pizza\\\"][\\\"price\\\"],\\ \\\"ordered_size\\\": \\\"Medium\\\",\\ \\\"toppings_added\\\": data[\\\"ordered_pizza\\\"][\\\"toppings\\\"]\\ }]}\\ \\\"shop_info\\\": {\\ \\\"shop_id\\\": data[\\\"shop_id\\\"],\\ \\\"name\\\": \\\"Best Pizza Place\\\",\\ \\\"location\\\": \\\"456 Elm St, Anytown, USA\\\"\\ }\\ }]}\\ \\\"user_contact_info\\\": {\\ \\\"email\\\": \\\"johndoe@example.com\\\",\\ \\\"phone\\\": \\\"123-456-7890\\\"\\ }]}\\ \\\"expected_delivery_time\\\": \\\"30 minutes\\\",\\ \\\"feedback_request\\\": {\\ \\\"message\\\": \\\"We value your feedback! Please let us know how we did.\\\",\\ \\\"survey_link\\\": \\\"https://www.example.com/feedback-survey\\\"\\ }\\ }\\ # Save the notification entity using the entity service.\\ notification_entity_id = await entity_service.add_item(\\ meta[\\\"token\\\"], \\\"notification_entity\\\", ENTITY_VERSION, notification_entity_data\\ )\\ data[\\\"notification_entity\\\"] = {\\\"technical_id\\\": notification_entity_id}\\ logger.info(f\\\"Notification entity saved successfully with ID: {notification_entity_id}\\\")\\ except Exception as e:\\ logger.error(f\\\"Error in send_notification: {e}\\\")\\ raise\\ ### Testing with Mocks\\ # ```python\\ import unittest\\ from unittest.mock import patch\\ import asyncio\\ class TestDataIngestionJob(unittest.TestCase):\\ @patch(\\\"app_init.app_init.entity_service.add_item\\\")\\ def test_process_order(self, mock_add_item):\\ mock_add_item.return_value = \\\"order_entity_id\\\"\\ meta = {\\\"token\\\": \\\"test_token\\\"}\\ data = {\\ \\\"user_id\\\": \\\"U001\\\",\\ \\\"shop_id\\\": \\\"PS001\\\",\\ \\\"pizza_selection\\\": {\\ \\\"item_id\\\": \\\"M001\\\",\\ \\\"quantity\\\": 1,\\ \\\"customizations\\\": {\\ \\\"size\\\": \\\"Medium\\\",\\ \\\"toppings\\\": [\\\"Extra cheese\\\", \\\"Olives\\\"]\\ }\\ }\\ }\\ asyncio.run(process_order(meta, data))\\ mock_add_item.assert_called_once()\\ @patch(\\\"app_init.app_init.entity_service.add_item\\\")\\ def test_send_notification(self, mock_add_item):\\ mock_add_item.return_value = \\\"notification_entity_id\\\"\\ meta = {\\\"token\\\": \\\"test_token\\\"}\\ data = {\\ \\\"user_id\\\": \\\"U001\\\",\\ \\\"shop_id\\\": \\\"PS001\\\",\\ \\\"ordered_pizza\\\": {\\ \\\"item_id\\\": \\\"M001\\\",\\ \\\"name\\\": \\\"Cheese Pizza\\\",\\ \\\"price\\\": 9.99,\\ \\\"toppings\\\": [\\\"Extra cheese\\\", \\\"Olives\\\"]\\ }]}\\ \\\"order_entity\\\": {\\ \\\"technical_id\\\": \\\"order_entity_id\\\"\\ }\\ }\\ asyncio.run(send_notification(meta, data))\\ mock_add_item.assert_called_once()\\ if __name__ == \\\"__main__\\\":\\ unittest.main()\\ \""}]}