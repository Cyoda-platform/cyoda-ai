{"messages": [{"role": "system", "content": "You are a cyoda application builder assistant"}, {"role": "user", "content": "Generate the quart additional api.py file to save the entity historical_data_storage_entity based on the user suggestions if there are any, if not you can proceed. Use blueprint api_bp_historical_data_storage_entity = Blueprint('api/historical_data_storage_entity', __name__) and @api_bp_historical_data_storage_entity.route respectively. Please use const ENTITY_VERSION for entity version and const cyoda_token for token. User says: "}, {"role": "assistant", "content": "# Here\\'s the implementation of the Quart API to save the **`historical_data_storage_entity`**. This API will be responsible for handling requests to store historical data related to conversion rate requests made by users.\\# \\# ### Additional `api.py` for `historical_data_storage_entity`\\# \\# ```python\\import logging\\from quart import Blueprint, request, jsonify\\from app_init.app_init import entity_service, cyoda_token\\from common.config.config import ENTITY_VERSION\\logging.basicConfig(level=logging.INFO)\\logger = logging.getLogger(__name__)\\api_bp_historical_data_storage_entity = Blueprint(\\'api_historical_data_storage_entity\\', __name__\\)\\@api_bp_historical_data_storage_entity.route(\\'/save\\', methods=[\\'POST\\'])\\async def save_historical_data():\"\"\"API endpoint to save historical data for conversion rate requests.\"\"\"\\try:\\data = await request.get_json()\\user_id = data.get(\"user_id\")\\requested_currencies = data.get(\"requested_currencies\")\\conversion_rates = data.get(\"conversion_rates\")\\request_id = data.get(\"request_id\")\\# Create the historical data storage entity\\historical_data = {\"request_id\": request_id,\"request_time\": \"2023-10-01T12:05:00Z\",  # Example timestamp\"user_id\": user_id,\"requested_currencies\": requested_currencies,\"status\": \"completed\",\"conversion_rates\": conversion_rates,\"notes\": \"This request was made to retrieve recent conversion rates for the specified currencies.\"\\}\\# Save the historical data entity using the entity service\\historical_data_id = await entity_service.add_item(\\cyoda_token,\"historical_data_storage_entity\",\\ENTITY_VERSION,\\historical_data\\)\\logger.info(f\"Historical data saved successfully with ID: {historical_data_id}\")\\return jsonify({\"status\": \"success\", \"data_id\": historical_data_id}), 201\\except Exception as e:\\logger.error(f\"Error saving historical data: {e}\")\\return jsonify({\"status\": \"error\", \"message\": str(e)}), 500"}]}