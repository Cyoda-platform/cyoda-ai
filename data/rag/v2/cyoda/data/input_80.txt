{"messages": [{"role": "system", "content": "You are a cyoda application builder assistant"}, {"role": "user", "content": "Cyoda Event-Driven Workflow Overview:\n\nCyoda manages workflows by reacting to entity events, orchestrating processes as state machines. Similar to AWS Step Functions, each workflow in Cyoda leverages state transitions that define how entities evolve over their lifecycle.\n\nJSON Representation of Cyoda Logic:\n\nThe JSON structure provided outlines the conceptual model behind the Cyoda application. It maps each entity type to its possible data sources, transitions, and dependencies within an event-driven architecture:\n\n{\n  \"entity\": {\n    \"type\": {\n      \"JOB\": {\n        \"source\": {\n          \"API_REQUEST\": {},\n          \"SCHEDULED\": {},\n          \"ENTITY_EVENT\": {}\n        },\n        \"example_transitions\": [\n          {\n            \"name\": \"ingest_data\",\n            \"description\": \"Ingest data from a connection and store it as raw data. Transition succeeds after successful ingestion.\",\n            \"secondary_entities_to_consider\": [\"RAW_DATA\"],\n            \"actions_to_consider\": [\n              \"data_ingestion.ingest_data_from_connection(entity_name) // returns raw_request_id\",\n            ],\n            \"data_to_remember\": [\"raw_request_id\"],\n            \"transition_type\": \"automatic\",\n          },\n          {\n            \"name\": \"transform_data\",\n            \"description\": \"Transform retrieved raw data into secondary data by applying user-defined transformations.\",\n            \"secondary_entities_to_consider\": [\"SECONDARY_DATA\"],\n            \"actions_to_consider\": [\n              \"entity_service.get_item(raw_request_id)\",\n              \"transform_data(): based on the user requirement\",\n              \"entity_service.add_item(secondary_data)\"\n            ],\n            \"transition_type\": \"automatic\",\n            \"depends_on\": [\"RAW_DATA\"]\n          },\n          {\n            \"name\": \"enrich_data\",\n            \"description\": \"Enrich the transformed data with additional information, possibly by querying external services.\",\n            \"secondary_entities_to_consider\": [\"SECONDARY_DATA\"],\n            \"actions_to_consider\": [\n              \"entity_service.get_item(raw_request_id)\",\n              \"enrich_data(): based on the user requirement\",\n              \"entity_service.add_item(secondary_data)\"\n            ],\n            \"transition_type\": \"automatic\",\n            \"depends_on\": [\"RAW_DATA\"]\n          },\n          {\n            \"name\": \"aggregate_data\",\n            \"description\": \"Aggregate the enriched data for final reporting or further analysis.\",\n            \"secondary_entities_to_consider\": [\"SECONDARY_DATA\"],\n            \"actions_to_consider\": [\n              \"entity_service.get_item(raw_request_id)\",\n              \"aggregate_data(): based on the user requirement\",\n              \"entity_service.add_item(secondary_data)\"\n            ],\n            \"transition_type\": \"automatic\",\n            \"depends_on\": [\"RAW_DATA\"]\n          },\n          {\n            \"name\": \"add_report\",\n            \"description\": \"Generate and store a report from the aggregated data.\",\n            \"secondary_entities_to_consider\": [\"REPORT\"],\n            \"actions_to_consider\": [\n              \"get_report_from_trino(user_requirement)\",\n              \"entity_service.add_item(raw_data)\"\n            ],\n            \"transition_type\": \"manual\",\n            \"depends_on\": [\"RAW_DATA\"]\n          }\n        ]\n      },\n      \"DATA\": {\n        \"type\": [\n          {\n            \"RAW_DATA\": {\n              \"type\": [\n                {\n                  \"PULL_BASED_RAW_DATA\": {\n                    \"type\": [\n                      {\n                        \"EXTERNAL_SOURCES_PULL_BASED_RAW_DATA\": {},\n                        \"WEB_SCRAPING_PULL_BASED_RAW_DATA\": {},\n                        \"TRANSACTIONAL_PULL_BASED_RAW_DATA\": {}\n                      }\n                    ]\n                  },\n                  \"PUSH_BASED_RAW_DATA\": {\n                    \"type\": [\n                      {\n                        \"EXTERNAL_SOURCES_PUSH_BASED_RAW_DATA\": {},\n                        \"WEB_SCRAPING_PUSH_BASED_RAW_DATA\": {},\n                        \"TRANSACTIONAL_PUSH_BASED_RAW_DATA\": {}\n                      }\n                    ]\n                  }\n                }\n              ],\n              \"source\": {\n                \"ENTITY_EVENT\": {\n                  \"depends_on\": [\"JOB\", \"DATA entity\"]\n                }\n              },\n              \"example_transitions\": [\n                \"Transitions for RAW_DATA occur as part of JOB workflows, initiating data processing.\"\n              ]\n            },\n            \"SECONDARY_DATA\": {\n              \"type\": [\n                {\n                  \"TRANSFORMED_SECONDARY_DATA\": {},\n                  \"ENRICHED_SECONDARY_DATA\": {},\n                  \"AGGREGATED_SECONDARY_DATA\": {}\n                }\n              ],\n              \"source\": {\n                \"ENTITY_EVENT\": {\n                  \"depends_on\": \"JOB or any other entity\"\n                }\n              },\n              \"example_transitions\": [\n                \"SECONDARY_DATA transitions result from JOB workflows (transformation, enrichment, aggregation).\"\n              ]\n            }\n          }\n        ]\n      },\n      \"UTIL\": {\n        \"source\": {\n          \"API_REQUEST\": {},\n          \"SCHEDULED\": {},\n          \"ENTITY_EVENT\": {}\n        }\n      },\n      \"CONFIG\": {\n        \"source\": {\n          \"API_REQUEST\": {}\n        }\n      },\n      \"BUSINESS_ENTITY\": {\n        \"source\": {\n          \"API_REQUEST\": {},\n          \"ENTITY_EVENT\": {}\n        },\n        \"example_transitions\": [\n          \"Transitions depend on the user\u2019s specific business logic.\"\n        ]\n      }\n    }\n  }\n}\nEntities and Their Roles:\n\nRaw Data Entities (RAW_DATA)\n\nDescription: Store unprocessed data obtained from various inputs (e.g., external APIs, user submissions, or web scraping).\nLifecycle in Workflow: Creation or updates to these entities trigger the associated JOB workflows to ingest and process this data.\nDerived Data Entities (SECONDARY_DATA)\n\nDescription: Contain transformed or enriched data derived from RAW_DATA through JOB workflows. They often have different schemas or structures than the original RAW_DATA.\nLifecycle in Workflow: Serve as intermediate outputs from workflows. Changes in SECONDARY_DATA can trigger further processing steps such as enrichment, aggregation, and eventually reporting.\nJob Entities (JOB)\n\nDescription: Represent the execution of processes rather than data. They initiate and manage workflows that act on RAW_DATA and produce SECONDARY_DATA.\nLifecycle in Workflow: Triggered by API calls, schedules, or entity events, JOB entities orchestrate the ingestion, transformation, enrichment, aggregation, and reporting processes.\nWorkflows as State Machines:\n\nStates: Each entity\u2019s status at a given time is captured as a \u201cstate,\u201d reflecting its current stage in the workflow.\nTransitions: Define how an entity moves from one state to another. In JOB workflows, transitions like ingest_data, transform_data, enrich_data, and aggregate_data are automated steps that run when conditions are met. Others, like add_report, may require manual triggers or additional data.\nTypes of Transitions:\n\nAutomatic Transitions: Execute when the required conditions are fulfilled without any external input, advancing the entity\u2019s state automatically.\nManual Transitions: Require user intervention or an external call to proceed.\nProcesses and Server-Side Functions:\n\nProcesses: Attached to transitions, these represent the logic performed during the state change. For example, transform_data() is a process that uses entity_service functions to manipulate data.\n\nServer-Side Functions:\n\nProvisioning: Developers provide functions that implement the logic referenced by transitions. Each function\u2019s name should match the process name and must be in Python.\nExecution: Functions run in a stateless environment. They receive metadata and entity data as arguments and can update entities, fetch additional data, and store results.\nSide Effects: Updated entities are persisted and subsequently used in downstream transitions.\nEvent-Driven Architecture:\n\nEvent Emission: Events occur when entities are created, modified, or removed.\nEvent Handling: These events trigger or advance workflows, moving entities through their defined transitions.\nWorkflow Persistence and Recovery:\n\nPersisting state within each entity allows for:\nScalability: Distributing workload across multiple instances.\nAuditability: Keeping a historical record of transitions for review and debugging.\n\n\n Required Output:\n\n Provide a Cyoda design JSON in the following format:\n\n json\n\n{\n  \"can_proceed\": false,\n  \"entities\": [\n    {\n      \"depends_on_entity\": \"None\",\n      \"entity_name\": \"data_ingestion_job\",\n      \"entity_source\": \"SCHEDULED\",\n      \"entity_type\": \"JOB\",\n      \"entity_workflow\": {\n        \"class_name\": \"com.cyoda.tdb.model.treenode.TreeNodeEntity\",\n        \"name\": \"data_ingestion_workflow\",\n        \"transitions\": [\n          {\n            \"criteria\": {\n              \"description\": \"Triggered by a scheduled job to ingest data.\",\n              \"name\": \"scheduled_ingestion\"\n            },\n            \"description\": \"Start the data ingestion process from the API.\",\n            \"end_state\": \"data_ingested\",\n            \"end_state_description\": \"Data has been successfully ingested.\",\n            \"name\": \"start_data_ingestion\",\n            \"process\": {\n              \"adds_new_entites\": \"raw_data_entity\",\n              \"description\": \"Process to ingest raw data from the specified API.\",\n              \"name\": \"ingest_raw_data\"\n            },\n            \"start_state\": \"None\",\n            \"start_state_description\": \"Initial state before data ingestion.\"\n          }\n        ]\n      }\n    },\n    {\n      \"depends_on_entity\": \"data_ingestion_job\",\n      \"entity_name\": \"raw_data_entity\",\n      \"entity_source\": \"ENTITY_EVENT\",\n      \"entity_type\": \"EXTERNAL_SOURCES_PULL_BASED_RAW_DATA\",\n      \"entity_workflow\": {\n        \"name\": \"raw_data_entity_workflow\",\n        \"class_name\": \"com.cyoda.tdb.model.treenode.TreeNodeEntity\",\n        \"transitions\": []\n      }\n      }\n      //other entities,\n  //entities names, processor names - should be all lowercase and underscore in order to match python style\n    }\n  ]\n}\n\nFor error 'None' is not of type 'object' use {} instead or for workflow \"entity_workflow\": {\n        \"name\": \"entity_workflow\",\n        \"class_name\": \"com.cyoda.tdb.model.treenode.TreeNodeEntity\",\n        \"transitions\": []\n      }\nRead this instruction, tell that you read it and wait for new instructions\n\nExample of server-side function file:\n```python\nimport asyncio\nimport logging\n\nfrom common.config.config import ENTITY_VERSION\nfrom app_init.app_init import entity_service\n\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\nasync def process_name(meta, data):\n    entity = await entity_service.get_item(meta[\"token\"], \"order\", ENTITY_VERSION, data[\"id\"])\n    logger.info(\"processing \")\n\n```"}, {"role": "assistant", "content": "I have read and understood the instructions regarding the Cyoda Event-Driven Workflow Overview, the JSON representation of Cyoda logic, and the required output for the Cyoda design JSON. I will ensure that the JSON format reflects the specified structure, including the necessary modifications to avoid errors related to using 'None' where an object is expected.\n\nI am now ready to proceed and await any new instructions or requests you may have."}]}