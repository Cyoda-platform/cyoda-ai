{"messages": [{"role": "system", "content": "You are a cyoda application builder assistant"}, {"role": "user", "content": "Generate Python code to fetch data from the external data source described in . The code should ingest the data according to the documentation and return processed (mapped) data without saving to repository. If the data source response differs from the entity curl https://airportgap.com/api/airports\nExample of successful response Status: 200 OK\n\n{\n  \"data\": [{\n      \"attributes\": {\n        \"altitude\": 5282,\n        \"city\": \"Goroka\",\n        \"country\": \"Papua New Guinea\",\n        \"iata\": \"GKA\",\n        \"icao\": \"AYGA\",\n        \"latitude\": \"-6.08169\",\n        \"longitude\": \"145.391998\",\n        \"name\": \"Goroka Airport\",\n        \"timezone\": \"Pacific/Port_Moresby\"\n\n      },\n      \"id\": \"GKA\",\n      \"type\": \"airport\"\n    },\n    {\n      \"attributes\": {\n        \"altitude\": 20,\n        \"city\": \"Madang\",\n        \"country\": \"Papua New Guinea\",\n        \"iata\": \"MAG\",\n        \"icao\": \"AYMD\",\n        \"latitude\": \"-5.20708\",\n        \"longitude\": \"145.789001\",\n        \"name\": \"Madang Airport\",\n        \"timezone\": \"Pacific/Port_Moresby\"\n      },\n      \"id\": \"MAG\",\n      \"type\": \"airport\"\n    },\n\n    ...\n\n    {\n      \"attributes\": {\n        \"altitude\": 1343,\n        \"city\": \"Brandon\",\n        \"country\": \"Canada\",\n        \"iata\": \"YBR\",\n        \"icao\": \"CYBR\",\n        \"latitude\": \"49.91\",\n        \"longitude\": \"-99.951897\",\n        \"name\": \"Brandon Municipal Airport\",\n        \"timezone\": \"America/Winnipeg\"\n      },\n      \"id\": \"YBR\",\n      \"type\": \"airport\"\n    },\n    {\n      \"attributes\": {\n        \"altitude\": 90,\n        \"city\": \"Cambridge Bay\",\n        \"country\": \"Canada\",\n        \"iata\": \"YCB\",\n        \"icao\": \"CYCB\",\n        \"latitude\": \"69.108101\",\n        \"longitude\": \"-105.138\",\n        \"name\": \"Cambridge Bay Airport\",\n        \"timezone\": \"America/Edmonton\"\n      },\n      \"id\": \"YCB\",\n      \"type\": \"airport\"\n    }\n  ],\n  \"links\": {\n    \"first\": \"https://airportgap.com/api/airports\",\n    \"last\": \"https://airportgap.com/api/airports?page=203\",\n    \"next\": \"https://airportgap.com/api/airports?page=2\",\n    \"prev\": \"https://airportgap.com/api/airports\",\n    \"self\": \"https://airportgap.com/api/airports\"\n  }\n}\n, map the raw data to the entity structure. If no mapping is needed, assume the response matches the entity format. Create a public function ingest_data(...) that handles the ingestion process. Also generate tests so that the user can try out the functions right away in isolated environment. **Tests should be in the same file with the code**"}, {"role": "assistant", "content": "```python\nimport asyncio\\nimport logging\\nimport aiohttp\\nimport unittest\\nfrom unittest.mock import patch\\n\\nlogging.basicConfig(level=logging.INFO)\\nlogger = logging.getLogger(__name__)\\n\\nAPI_URL = \"https://airportgap.com/api/airports\"\\n\\nasync def fetch_data():\\n\\n    async with aiohttp.ClientSession() as session:\\n        try:\\n            async with session.get(API_URL) as response:\\n                if response.status == 200:\\n                    return await response.json()\\n                else:\\n                    logger.error(f\"Error fetching data: {response.status}\")\\n                    return None\\n        except Exception as e:\\n            logger.error(f\"Exception occurred: {str(e)}\")\\n            return None\\n\\nasync def ingest_data() -> list:\\n    data = await fetch_data()\\n    if data is None:\\n        logger.error(\"No data received for ingestion.\")\\n        return []\\n    \\n    mapped_data = [\\n        {\\n            \"id\": airport[\"id\"],\\n            \"name\": airport[\"attributes\"][\"name\"],\\n            \"city\": airport[\"attributes\"][\"city\"],\\n            \"country\": airport[\"attributes\"][\"country\"],\\n            \"iata\": airport[\"attributes\"][\"iata\"],\\n            \"icao\": airport[\"attributes\"][\"icao\"],\\n            \"latitude\": airport[\"attributes\"][\"latitude\"],\\n            \"longitude\": airport[\"attributes\"][\"longitude\"],\\n            \"altitude\": airport[\"attributes\"][\"altitude\"],\\n            \"timezone\": airport[\"attributes\"][\"timezone\"]\\n        }\\n        for airport in data.get(\"data\", [])\\n    ]\\n\\n    return mapped_data\\n\\nclass TestDataIngestion(unittest.TestCase):\\n\\n    def test_ingest_data_success(self):\\n\\n        result = asyncio.run(ingest_data())\\n\\n        self.assertTrue(len(result)> 0)\\n        self.assertEqual(result[0][\"id\"], \"GKA\")\\n        self.assertEqual(result[0][\"name\"], \"Goroka Airport\")\\n        self.assertEqual(result[0][\"city\"], \"Goroka\")\\n        self.assertEqual(result[0][\"country\"], \"Papua New Guinea\")\\n        self.assertEqual(result[0][\"iata\"], \"GKA\")\\n        self.assertEqual(result[0][\"icao\"], \"AYGA\")\\n        self.assertEqual(result[0][\"latitude\"], \"-6.08169\")\\n        self.assertEqual(result[0][\"longitude\"], \"145.391998\")\\n        self.assertEqual(result[0][\"altitude\"], 5282)\\n        self.assertEqual(result[0][\"timezone\"], \"Pacific/Port_Moresby\")\\n\\nif __name__ == \"__main__\":\\n    unittest.main()\n ```"}]}