{"messages": [{"role": "system", "content": "You are a cyoda application builder assistant"}, {"role": "user", "content": "Please, generate the processor functions for data_ingestion_job call public functions by the name of each processor: schedule_ingestion, generate_report.  Reuse functions that are available in the code base, including logic.app_init import entity_service, connections.py (ingest_data public function) and any other existing function that is related to your purpose. Make sure you include logic to save any dependant entities: raw_data_entity, report_entity. Also generate tests with mocks for external services or functions so that the user can try out the functions right away in isolated environment. **Tests should be in the same file with the code**data_ingestion_job. Based on the user suggestions if there are any.  Please make sure you are re-using all raw_data_*/connections/connection.py ingest_data functions. This is very important not to re-implement ingest_data but reuse it. You should import and reuse all ingest_data functions, use 'as' to avoid names duplicates. Make sure the result of data ingestion is saved to the corresponding raw data entity. Please also make sure that you understand that argument 'data' that you pass to each function corresponds to entity/data_ingestion_job/data_ingestion_job.json data and not to any other entity! User says: "}, {"role": "assistant", "content": "```python \"import logging\nimport asyncio\nfrom app_init.app_init import entity_service\nfrom entity.raw_data_entity.connections.connections import ingest_data as ingest_raw_data\nfrom common.config.config import ENTITY_VERSION\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\nasync def schedule_ingestion(meta, data):\n    logger.info(\"Starting the schedule_ingestion process.\")\n    try:\n        # Call the ingest_data function to retrieve cover photos\n        raw_data = await ingest_raw_data()\n        if not raw_data:\n            logger.error(\"No raw data received for ingestion.\")\n            return\n        # Save the raw data entity\n        raw_data_entity_id = await entity_service.add_item(\n            meta[\"token\"], \"raw_data_entity\", ENTITY_VERSION, raw_data\n        )\n        logger.info(f\"Raw data entity saved successfully with ID: {raw_data_entity_id}\")\n        # Update the data with the technical ID of the raw data entity\n        data[\"raw_data_entity\"] = {\n            \"technical_id\": raw_data_entity_id,\n            \"records\": raw_data\n        }\n    except Exception as e:\n        logger.error(f\"Error in schedule_ingestion: {e}\")\n        raise\nasync def generate_report(meta, data):\n    logger.info(\"Starting the generate_report process.\")\n    try:\n        report_data = {\n            \"title\": \"Daily Cover Photo Report\",\n            \"date_generated\": \"2023-10-01T05:06:00Z\",\n            \"summary\": \"This report summarizes the results of the daily data ingestion job.\",\n            \"total_photos\": len(data[\"raw_data_entity\"][\"records\"]),\n            \"photos\": data[\"raw_data_entity\"][\"records\"]\n        }\n        # Save the report entity\n        report_entity_id = await entity_service.add_item(\n            meta[\"token\"], \"report_entity\", ENTITY_VERSION, report_data\n        )\n        logger.info(f\"Report entity created successfully with ID: {report_entity_id}\")\n    except Exception as e:\n        logger.error(f\"Error in generate_report: {e}\")\n        raise\nimport unittest\nfrom unittest.mock import patch\nclass TestDataIngestionJobProcessors(unittest.TestCase):\n    @patch(\"app_init.app_init.entity_service.add_item\")\n    @patch(\"workflow.ingest_raw_data\")\n    def test_schedule_ingestion(self, mock_ingest_data, mock_add_item):\n        mock_ingest_data.return_value = [\n            {\n                \"id\": 1,\n                \"idBook\": 1,\n                \"url\": \"https://placeholdit.imgix.net/~text?txtsize=33&txt=Book 1&w=250&h=350\"\n            }\n        ]\n        mock_add_item.return_value = \"raw_data_entity_id\"\n        meta = {\"token\": \"test_token\"}\n        data = {}\n        asyncio.run(schedule_ingestion(meta, data))\n        mock_add_item.assert_called_once_with(\n            meta[\"token\"], \"raw_data_entity\", ENTITY_VERSION, mock_ingest_data.return_value\n        )\n    @patch(\"app_init.app_init.entity_service.add_item\")\n    def test_generate_report(self, mock_add_item):\n        mock_add_item.return_value = \"report_entity_id\"\n        meta = {\"token\": \"test_token\"}\n        data = {\n            \"raw_data_entity\": {\n                \"technical_id\": \"raw_data_entity_001\",\n                \"records\": [\n                    {\n                        \"id\": 1,\n                        \"idBook\": 1,\n                        \"url\": \"https://placeholdit.imgix.net/~text?txtsize=33&txt=Book 1&w=250&h=350\"\n                    },\n                    {\n                        \"id\": 2,\n                        \"idBook\": 1,\n                        \"url\": \"https://placeholdit.imgix.net/~text?txtsize=33&txt=Book 2&w=250&h=350\"\n                    }\n                ]\n            }\n        }\n        asyncio.run(generate_report(meta, data))\n        mock_add_item.assert_called_once_with(\n            meta[\"token\"], \"report_entity\", ENTITY_VERSION, {\n                \"title\": \"Daily Cover Photo Report\",\n                \"date_generated\": \"2023-10-01T05:06:00Z\",\n                \"summary\": \"This report summarizes the results of the daily data ingestion job.\",\n                \"total_photos\": len(data[\"raw_data_entity\"][\"records\"]),\n                \"photos\": data[\"raw_data_entity\"][\"records\"]\n            }\n        )\nif __name__ == \"__main__\":\n    unittest.main()\n\"```"}]}