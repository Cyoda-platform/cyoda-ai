{"messages": [{"role": "system", "content": "You are a cyoda application builder assistant"}, {"role": "user", "content": "Please outline entities for this requirement. Return entities diagram (mermaid or plantuml).\nPlease give me some json examples of data models for each entity, based on my requirement (you can use abridged json versions substituting excessive text with ...) . Provide only example data. If I provided entity schemas - just use them (abridged), if no - generate yours. \nFor each entity specify how it should be saved - through the workflow of a different entity (ENTITY_EVENT, SECONDARY_DATA) or directly via an API call or maybe via scheduler.\nFor an orchestration entity (if there is any) consider adding a single workflow per app. If there is no orchestration entity - then add workflow to any entity where it makes sense.\n***For each workflow let's provide a flowchart***\nExample:\n```mermaid\nflowchart TD\n  A[Start State] -->|transition: transition_name_1, processor: processor_name_1, processor attributes: sync_process=true/false, new_transaction_for_async=true/false, none_transactional_for_async=true/false| B[State 1]\n  B -->|transition: transition_name_2, processor: processor_name_2, processor attributes: sync_process=true/false, new_transaction_for_async=true/false, none_transactional_for_async=true/false| C[State 2]\n  C --> D[End State]\n  %% Decision point for criteria (only if necessary!)\n  B -->|criteria: criteria_name, entityModelName equals some_value| D1{Decision: Check Criteria}\n  D1 -->|true| C\n  D1 -->|false| E[Error: Criteria not met]\nclass A,B,C,D,D1 automated;\n``` \nIf I ask you a general question, just return an answer to this question.\nIf I ask you a general question, just return an answer to this question. \nI say:  sequenceDiagram     participant USER     participant Data_ingestion     participant Cover_photos_api     participant Report     participant API          USER->>API: list     API->>Data_ingestion: list     Data_ingestion->>API: id     API->>Cover_photos_api: id     Cover_photos_api->>API: id     API->>Report: id"}, {"role": "assistant", "content": "\"## Entities Overview\n### 1. Data Ingestion Job (data_ingestion_job)\n```json\n{\n  \"entity_name\": \"data_ingestion_job\",\n  \"entity_type\": \"JOB\",\n  \"entity_source\": \"API_REQUEST\",\n  \"workflow_trigger\": \"scheduled ingestion of cover photos\",\n  \"data_ingestion_time\": \"2020-01-01\",\n  \"data_ingestion_id\": \"123\",\n  \"status\": \"success\"\n}\n```\n- **Description**: This job is responsible for orchestrating the process of retrieving cover photos from the specified API.\n### 2. Raw Data Entity (raw_data_entity)\n```json\n{\n  \"entity_name\": \"raw_data_entity\",\n  \"entity_type\": \"EXTERNAL_SOURCES_PULL_BASED_RAW_DATA\",\n  \"entity_source\": \"ENTITY_EVENT\",\n  \"data\": [\n    {\n      \"id\": 1,\n      \"url\": \"https://example.com/cover_photo1.jpg\",\n      \"description\": \"Cover photo for the first book.\"\n    },\n    {\n      \"id\": 2,\n      \"url\": \"https://example.com/cover_photo2.jpg\",\n      \"description\": \"Cover photo for the second book.\"\n    }\n  ]\n}\n```\n- **Description**: This entity stores the data retrieved from the Cover Photos API, including details of the cover photos.\n### 3. Report Entity (report_entity)\n```json\n{\n  \"entity_name\": \"report_entity\",\n  \"entity_type\": \"SECONDARY_DATA\",\n  \"entity_source\": \"ENTITY_EVENT\",\n  \"report\": {\n    \"title\": \"Daily Cover Photo Report\",\n    \"date_generated\": \"2023-10-10\",\n    \"summary\": \"This report contains the details of the cover photos ingested from the API.\"\n  }\n}\n```\n- **Description**: This report entity is created after the data ingestion process, summarizing the details of the cover photos collected.\n## Workflow Overview\n### Workflow Flowchart\n```mermaid\nflowchart TD\n  A[Start State] -->|transition: ingest_cover_photos, processor: schedule_ingestion, processor attributes: sync_process=false| B[Raw Data Entity Created]\n  B -->|transition: generate_report, processor: generate_report, processor attributes: sync_process=true| D[Report Entity Created]\n  D --> F[End State]\n```\n### Workflow Description\n- The workflow initiates the data ingestion process by triggering the `data_ingestion_job`.\n- Upon successful ingestion of data, the raw data entity is created.\n- Finally, the workflow generates a report summarizing the ingested data and creates the report entity.\n## Event-Driven Architecture\nThe application employs an event-driven architecture that enables it to respond automatically to various triggers without manual intervention. Key events include:\n1. **Data Ingestion**: Triggered by the scheduled job to fetch cover photos from the API.\n2. **Data Processing**: Events that facilitate the transition from raw data to aggregated data and report generation.\n## Conclusion\nThe PRD outlines the essential components and functionalities required for the application focused on ingesting, aggregating, and reporting cover photos from an API. By leveraging an event-driven architecture, the application ensures efficient and automated processing of data, ultimately enhancing the user experience for the admin receiving the reports.\nIf you have any further adjustments or additional requirements, please let me know! I\\'m here to help! \ud83c\udf1f\""}]}