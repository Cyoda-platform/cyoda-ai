        {
        "ai_endpoint": "cyoda",
        "question": "Generate Cyoda design, based on the requirement. Do not forget to explicitly add the entities that you add in the workflow processors, and use only lowercase underscore for namings. Add workflow only where necessary. If the entity is saved in the workflow of another entity (e.g. JOB) then its source will be ENTITY_EVENT. If you have a JOB entity in the design - usually just one JOB entity is enough. If you fail schema validation - check this examle {\"$schema\":\"http://json-schema.org/draft-07/schema#\",\"title\":\"Cyodadesign\",\"type\":\"object\",\"entities\":[{\"entity_name\":\"data_collection_job\",\"entity_type\":\"JOB\",\"entity_source\":\"SCHEDULED\",\"depends_on_entity\":\"None\",\"entity_workflow\":{\"name\":\"data_collection_workflow\",\"class_name\":\"com.cyoda.tdb.model.treenode.TreeNodeEntity\",\"transitions\":[{\"name\":\"collect_data_from_source_a\",\"description\":\"CollectdatafromsourceA.\",\"start_state\":\"None\",\"start_state_description\":\"Initialstatebeforedatacollection.\",\"end_state\":\"data_collected_a\",\"end_state_description\":\"DatafromsourceAhasbeensuccessfullycollected.\",\"process\":{\"name\":\"collect_data_a_process\",\"description\":\"ProcesstocollectrawdatafromsourceA.\",\"adds_new_entites\":\"raw_data_a_entity\"}}]}},{\"entity_name\":\"raw_data_a_entity\",\"entity_type\":\"EXTERNAL_SOURCES_PULL_BASED_RAW_DATA\",\"entity_source\":\"ENTITY_EVENT\",\"depends_on_entity\":\"data_collection_job\",\"entity_workflow\":{}}]}. Use this json schema http://json-schema.org/draft-07/schema# to understand how to structure your answer: {'$schema': 'http://json-schema.org/draft-07/schema#', 'title': 'Cyoda design', 'type': 'object', 'properties': {'entities': {'type': 'array', 'items': {'type': 'object', 'properties': {'entity_name': {'type': 'string'}, 'entity_type': {'type': 'string', 'enum': ['JOB', 'EXTERNAL_SOURCES_PULL_BASED_RAW_DATA', 'WEB_SCRAPING_PULL_BASED_RAW_DATA', 'TRANSACTIONAL_PULL_BASED_RAW_DATA', 'EXTERNAL_SOURCES_PUSH_BASED_RAW_DATA', 'WEB_SCRAPING_PUSH_BASED_RAW_DATA', 'TRANSACTIONAL_PUSH_BASED_RAW_DATA', 'SECONDARY_DATA', 'UTIL', 'CONFIG', 'BUSINESS_ENTITY']}, 'entity_source': {'type': 'string', 'enum': ['API_REQUEST', 'SCHEDULED', 'ENTITY_EVENT']}, 'depends_on_entity': {'type': 'string'}, 'entity_workflow': {'type': 'object', 'properties': {'name': {'type': 'string'}, 'class_name': {'type': 'string', 'enum': ['com.cyoda.tdb.model.treenode.TreeNodeEntity']}, 'transitions': {'type': 'array', 'items': {'type': 'object', 'properties': {'name': {'type': 'string'}, 'description': {'type': 'string'}, 'start_state': {'type': 'string'}, 'start_state_description': {'type': 'string'}, 'end_state': {'type': 'string'}, 'end_state_description': {'type': 'string'}, 'process': {'type': 'object', 'properties': {'name': {'type': 'string'}, 'description': {'type': 'string'}, 'adds_new_entites': {'type': 'string'}}, 'required': ['name', 'description', 'adds_new_entites']}}, 'required': ['name', 'start_state', 'end_state', 'process']}}}, 'required': ['name', 'class_name', 'transitions']}}, 'required': ['entity_name', 'entity_type', 'entity_source', 'depends_on_entity', 'entity_workflow']}}}, 'required': ['entities']}. It will be validated against this schema. Return only json (python dictionary)",
        "answer": "```json\n{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"title\": \"Cyoda design\",\n  \"type\": \"object\",\n  \"entities\": [\n    {\n      \"entity_name\": \"data_ingestion_job\",\n      \"entity_type\": \"JOB\",\n      \"entity_source\": \"SCHEDULED\",\n      \"depends_on_entity\": \"None\",\n      \"entity_workflow\": {\n        \"name\": \"data_ingestion_workflow\",\n        \"class_name\": \"com.cyoda.tdb.model.treenode.TreeNodeEntity\",\n        \"transitions\": [\n          {\n            \"name\": \"start_data_ingestion\",\n            \"description\": \"Start the data ingestion process from the specified data source.\",\n            \"start_state\": \"None\",\n            \"start_state_description\": \"Initial state before data ingestion.\",\n            \"end_state\": \"data_ingested\",\n            \"end_state_description\": \"Data has been successfully ingested.\",\n            \"process\": {\n              \"name\": \"ingest_raw_data\",\n              \"description\": \"Process to ingest raw data from the specified API.\",\n              \"adds_new_entites\": \"raw_data_entity\"\n            }\n          }\n        ]\n      }\n    },\n    {\n      \"entity_name\": \"raw_data_entity\",\n      \"entity_type\": \"EXTERNAL_SOURCES_PULL_BASED_RAW_DATA\",\n      \"entity_source\": \"ENTITY_EVENT\",\n      \"depends_on_entity\": \"data_ingestion_job\",\n      \"entity_workflow\": {\n        \"name\": \"raw_data_workflow\",\n        \"class_name\": \"com.cyoda.tdb.model.treenode.TreeNodeEntity\",\n        \"transitions\": []\n      }\n    },\n    {\n      \"entity_name\": \"aggregated_data_entity\",\n      \"entity_type\": \"SECONDARY_DATA\",\n      \"entity_source\": \"ENTITY_EVENT\",\n      \"depends_on_entity\": \"data_ingestion_job\",\n      \"entity_workflow\": {\n        \"name\": \"aggregated_data_workflow\",\n        \"class_name\": \"com.cyoda.tdb.model.treenode.TreeNodeEntity\",\n        \"transitions\": []\n      }\n    },\n    {\n      \"entity_name\": \"report_entity\",\n      \"entity_type\": \"SECONDARY_DATA\",\n      \"entity_source\": \"ENTITY_EVENT\",\n      \"depends_on_entity\": \"data_ingestion_job\",\n      \"entity_workflow\": {\n        \"name\": \"report_workflow\",\n        \"class_name\": \"com.cyoda.tdb.model.treenode.TreeNodeEntity\",\n        \"transitions\": []\n      }\n    }\n  ]\n}\n```"
    },
    {
        "ai_endpoint": "cyoda",
        "question": "Generate Cyoda design, based on the requirement. Do not forget to explicitly add the entities that you add in the workflow processors, and use only lowercase underscore for namings. Add workflow only where necessary. If the entity is saved in the workflow of another entity (e.g. JOB) then its source will be ENTITY_EVENT. If you have a JOB entity in the design - usually just one JOB entity is enough. If you fail schema validation - check this examle {\"$schema\":\"http://json-schema.org/draft-07/schema#\",\"title\":\"Cyodadesign\",\"type\":\"object\",\"entities\":[{\"entity_name\":\"data_collection_job\",\"entity_type\":\"JOB\",\"entity_source\":\"SCHEDULED\",\"depends_on_entity\":\"None\",\"entity_workflow\":{\"name\":\"data_collection_workflow\",\"class_name\":\"com.cyoda.tdb.model.treenode.TreeNodeEntity\",\"transitions\":[{\"name\":\"collect_data_from_source_a\",\"description\":\"CollectdatafromsourceA.\",\"start_state\":\"None\",\"start_state_description\":\"Initialstatebeforedatacollection.\",\"end_state\":\"data_collected_a\",\"end_state_description\":\"DatafromsourceAhasbeensuccessfullycollected.\",\"process\":{\"name\":\"collect_data_a_process\",\"description\":\"ProcesstocollectrawdatafromsourceA.\",\"adds_new_entites\":\"raw_data_a_entity\"}}]}},{\"entity_name\":\"raw_data_a_entity\",\"entity_type\":\"EXTERNAL_SOURCES_PULL_BASED_RAW_DATA\",\"entity_source\":\"ENTITY_EVENT\",\"depends_on_entity\":\"data_collection_job\",\"entity_workflow\":{}}]}. Use this json schema http://json-schema.org/draft-07/schema# to understand how to structure your answer: {'$schema': 'http://json-schema.org/draft-07/schema#', 'title': 'Cyoda design', 'type': 'object', 'properties': {'entities': {'type': 'array', 'items': {'type': 'object', 'properties': {'entity_name': {'type': 'string'}, 'entity_type': {'type': 'string', 'enum': ['JOB', 'EXTERNAL_SOURCES_PULL_BASED_RAW_DATA', 'WEB_SCRAPING_PULL_BASED_RAW_DATA', 'TRANSACTIONAL_PULL_BASED_RAW_DATA', 'EXTERNAL_SOURCES_PUSH_BASED_RAW_DATA', 'WEB_SCRAPING_PUSH_BASED_RAW_DATA', 'TRANSACTIONAL_PUSH_BASED_RAW_DATA', 'SECONDARY_DATA', 'UTIL', 'CONFIG', 'BUSINESS_ENTITY']}, 'entity_source': {'type': 'string', 'enum': ['API_REQUEST', 'SCHEDULED', 'ENTITY_EVENT']}, 'depends_on_entity': {'type': 'string'}, 'entity_workflow': {'type': 'object', 'properties': {'name': {'type': 'string'}, 'class_name': {'type': 'string', 'enum': ['com.cyoda.tdb.model.treenode.TreeNodeEntity']}, 'transitions': {'type': 'array', 'items': {'type': 'object', 'properties': {'name': {'type': 'string'}, 'description': {'type': 'string'}, 'start_state': {'type': 'string'}, 'start_state_description': {'type': 'string'}, 'end_state': {'type': 'string'}, 'end_state_description': {'type': 'string'}, 'process': {'type': 'object', 'properties': {'name': {'type': 'string'}, 'description': {'type': 'string'}, 'adds_new_entites': {'type': 'string'}}, 'required': ['name', 'description', 'adds_new_entites']}}, 'required': ['name', 'start_state', 'end_state', 'process']}}}, 'required': ['name', 'class_name', 'transitions']}}, 'required': ['entity_name', 'entity_type', 'entity_source', 'depends_on_entity', 'entity_workflow']}}}, 'required': ['entities']}. It will be validated against this schema. Return only json (python dictionary)",
        "answer": "```json\n{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"title\": \"Cyoda design\",\n  \"type\": \"object\",\n  \"entities\": [\n    {\n      \"entity_name\": \"data_ingestion_job\",\n      \"entity_type\": \"JOB\",\n      \"entity_source\": \"SCHEDULED\",\n      \"depends_on_entity\": \"None\",\n      \"entity_workflow\": {\n        \"name\": \"data_ingestion_workflow\",\n        \"class_name\": \"com.cyoda.tdb.model.treenode.TreeNodeEntity\",\n        \"transitions\": [\n          {\n            \"name\": \"scheduled_data_ingestion\",\n            \"description\": \"Triggered by a scheduled job to ingest data.\",\n            \"start_state\": \"None\",\n            \"start_state_description\": \"Initial state before data ingestion.\",\n            \"end_state\": \"data_ingested\",\n            \"end_state_description\": \"Data has been successfully ingested.\",\n            \"process\": {\n              \"name\": \"ingest_raw_data\",\n              \"description\": \"Process to ingest raw data from the specified data source.\",\n              \"adds_new_entites\": \"raw_data_entity\"\n            }\n          },\n          {\n            \"name\": \"aggregate_data\",\n            \"description\": \"Aggregate the ingested raw data.\",\n            \"start_state\": \"data_ingested\",\n            \"start_state_description\": \"Data has been ingested and is ready for aggregation.\",\n            \"end_state\": \"data_aggregated\",\n            \"end_state_description\": \"Data has been successfully aggregated.\",\n            \"process\": {\n              \"name\": \"aggregate_raw_data_process\",\n              \"description\": \"Process to aggregate raw data for reporting.\",\n              \"adds_new_entites\": \"aggregated_data_entity\"\n            }\n          },\n          {\n            \"name\": \"generate_and_send_report\",\n            \"description\": \"Generate a report and send it to admin via email.\",\n            \"start_state\": \"data_aggregated\",\n            \"start_state_description\": \"Data has been aggregated and is ready to be reported.\",\n            \"end_state\": \"report_sent\",\n            \"end_state_description\": \"Report has been successfully sent to admin.\",\n            \"process\": {\n              \"name\": \"generate_report_process\",\n              \"description\": \"Process to create a report and send it via email.\",\n              \"adds_new_entites\": \"report_entity\"\n            }\n          }\n        ]\n      }\n    },\n    {\n      \"entity_name\": \"raw_data_entity\",\n      \"entity_type\": \"EXTERNAL_SOURCES_PULL_BASED_RAW_DATA\",\n      \"entity_source\": \"ENTITY_EVENT\",\n      \"depends_on_entity\": \"data_ingestion_job\",\n      \"entity_workflow\": {\n        \"name\": \"raw_data_workflow\",\n        \"class_name\": \"com.cyoda.tdb.model.treenode.TreeNodeEntity\",\n        \"transitions\": []\n      }\n    },\n    {\n      \"entity_name\": \"aggregated_data_entity\",\n      \"entity_type\": \"SECONDARY_DATA\",\n      \"entity_source\": \"ENTITY_EVENT\",\n      \"depends_on_entity\": \"data_ingestion_job\",\n      \"entity_workflow\": {\n        \"name\": \"aggregated_data_workflow\",\n        \"class_name\": \"com.cyoda.tdb.model.treenode.TreeNodeEntity\",\n        \"transitions\": []\n      }\n    },\n    {\n      \"entity_name\": \"report_entity\",\n      \"entity_type\": \"SECONDARY_DATA\",\n      \"entity_source\": \"ENTITY_EVENT\",\n      \"depends_on_entity\": \"data_ingestion_job\",\n      \"entity_workflow\": {\n        \"name\": \"report_workflow\",\n        \"class_name\": \"com.cyoda.tdb.model.treenode.TreeNodeEntity\",\n        \"transitions\": []\n      }\n    }\n  ]\n}\n```"
    },
    {
        "ai_endpoint": "cyoda",
        "question": "Using Cyoda design json, return human readable prd document that explains the Cyoda design json and explains how it is aligned with the requirement. You not only need to translate the json, but explain what is Cyoda entity data base, how event driven approach works for the specific requirement - why we do what we do, as the user will be completely new to Cyoda. Also include markdown diagrams, e.g for entities and sequence, actors etc, you can use mermaid dialect or whatever applicable",
        "answer": "# Product Requirements Document (PRD) for Cyoda Design\n\n## Introduction\n\nThis document outlines the Cyoda-based application designed to manage data ingestion, aggregation, report generation, and email notification. It explains how the Cyoda design aligns with the specified requirements and provides a comprehensive overview of the concepts involved in the Cyoda entity database, the event-driven architecture, and the various workflows, entities, and actors involved in the system.\n\n## What is Cyoda?\n\nCyoda is a serverless, event-driven framework that facilitates the management of workflows through entities representing jobs and data. Each entity has a defined state, and transitions between states are governed by events that occur within the system, enabling a responsive and scalable architecture. \n\nIn a Cyoda design, the following key concepts are involved:\n\n- **Entities**: Fundamental components in Cyoda that represent processes or data (e.g., jobs, raw data, reports).\n- **Workflows**: Processes tied to each job entity that define state transitions as events occur.\n- **Event-Driven Architecture**: An approach that allows the application to respond automatically to changes or events, promoting scalability and efficiency.\n\n## Cyoda Entity Database\n\nThe Cyoda entity database consists of several entities that represent the core functionalities required for the application. The design JSON outlines the following entities:\n\n1. **Data Ingestion Job (`data_ingestion_job`)**:\n   - **Type**: JOB\n   - **Source**: SCHEDULED\n   - **Description**: Responsible for ingesting data from specified sources on a scheduled basis (once a day). It transitions through states to complete the ingestion process.\n\n2. **Raw Data Entity (`raw_data_entity`)**:\n   - **Type**: EXTERNAL_SOURCES_PULL_BASED_RAW_DATA\n   - **Source**: ENTITY_EVENT\n   - **Description**: Stores the raw data that has been ingested by the data ingestion job. Its creation is triggered by the corresponding job.\n\n3. **Aggregated Data Entity (`aggregated_data_entity`)**:\n   - **Type**: SECONDARY_DATA\n   - **Source**: ENTITY_EVENT\n   - **Description**: Holds the aggregated data for reporting purposes. It is derived from the raw data entity.\n\n4. **Report Entity (`report_entity`)**:\n   - **Type**: SECONDARY_DATA\n   - **Source**: ENTITY_EVENT\n   - **Description**: Contains the generated report that is sent to the admin via email after aggregation.\n\n### Entity Diagram\n\n```mermaid\ngraph TD;\n    A[data_ingestion_job] -->|triggers| B[raw_data_entity];\n    A -->|triggers| C[aggregated_data_entity];\n    A -->|triggers| D[report_entity];\n```\n\n## Workflow Overview\n\nThe workflows in Cyoda define how each job entity operates through a series of transitions. The `data_ingestion_job` includes a singular workflow that outlines the following transition:\n\n- **Start Data Ingestion**: Initiates the data ingestion process from the specified data source, capturing the raw data and marking the state as \"data_ingested\".\n\n### Sequence Diagram\n\n```mermaid\nsequenceDiagram\n    participant Admin\n    participant Scheduler\n    participant Data Ingestion Job\n    participant Raw Data Entity\n    participant Aggregated Data Entity\n    participant Report Entity\n\n    Admin->>Scheduler: Schedule data ingestion job\n    Scheduler->>Data Ingestion Job: Trigger data ingestion\n    Data Ingestion Job->>Raw Data Entity: Ingest data\n    Raw Data Entity-->>Data Ingestion Job: Data ingested\n    Data Ingestion Job->>Aggregated Data Entity: Aggregate data\n    Aggregated Data Entity-->>Data Ingestion Job: Data aggregated\n    Data Ingestion Job->>Report Entity: Generate report\n    Report Entity-->>Data Ingestion Job: Report generated\n    Data Ingestion Job->>Admin: Send report\n```\n\n## Event-Driven Approach\n\nAn event-driven architecture is employed to ensure that the application can automatically respond to various triggers without manual intervention. For the specific requirement, the following key events occur:\n\n1. **Data Ingestion**: The data ingestion job is triggered on a scheduled basis, automatically initiating the process of fetching data from the specified source.\n2. **Data Aggregation**: Once the data ingestion is complete, an event signals the need to aggregate the ingested data.\n3. **Report Generation and Sending**: After the aggregation is finalized, another event triggers the creation of the report and sending it to the admin's email.\n\n### Benefits of the Event-Driven Approach\n\n- **Scalability**: The system can handle multiple ingestion jobs and data processing tasks simultaneously, distributing workload effectively.\n- **Efficiency**: With automation in place, the application can operate continuously and reliably without manual oversight.\n  \n### Actors Involved\n\n- **Admin**: The recipient of the generated reports via email.\n- **Scheduler**: Responsible for triggering the data ingestion job as per the defined schedule.\n- **Data Ingestion Job**: Central entity managing the workflow of data processing.\n- **Raw Data Entity**: Stores the ingested raw data.\n- **Aggregated Data Entity**: Holds the processed and aggregated data.\n- **Report Entity**: Contains the generated report.\n\n## Conclusion\n\nThe Cyoda design effectively aligns with the requirements for creating a robust data processing application. By utilizing the event-driven model, the application efficiently manages state transitions of each entity involved, from data ingestion to report delivery. The outlined entities, workflows, and events comprehensively cover the needs of the application, ensuring a smooth and automated process.\n\nThis PRD serves as a foundation for implementation and development, guiding the technical team through the specifics of the Cyoda architecture while providing clarity for users who may be new to the Cyoda framework."
    },
        {
        "ai_endpoint": "cyoda",
        "question": "Using Cyoda design json, return human readable prd document that explains the Cyoda design json and explains how it is aligned with the requirement. You not only need to translate the json, but explain what is Cyoda entity data base, how event driven approach works for the specific requirement - why we do what we do, as the user will be completely new to Cyoda. Also include markdown diagrams, e.g for entities and sequence, actors etc, you can use mermaid dialect or whatever applicable",
        "answer": "# Product Requirements Document (PRD) for Cyoda Design\n\n## Introduction\n\nThis document provides an overview of the Cyoda-based application designed to manage data ingestion, aggregation, report generation, and email notification. It explains how the Cyoda design aligns with the specified requirements, focusing on the structure of entities, workflows, and the event-driven architecture that powers the application. The design is represented in a Cyoda JSON format which is translated into a human-readable document for clarity.\n\n## What is Cyoda?\n\nCyoda is a serverless, event-driven framework that facilitates the management of workflows through entities representing jobs and data. Each entity has a defined state, and transitions between states are governed by events that occur within the system\u2014enabling a responsive and scalable architecture.\n\n### Cyoda Entity Database\n\nIn the Cyoda ecosystem, entities are fundamental components that represent processes and data. The Cyoda design JSON outlines several entities for our application:\n\n1. **Data Ingestion Job (`data_ingestion_job`)**:\n   - **Type**: JOB\n   - **Source**: SCHEDULED\n   - **Description**: This job is responsible for ingesting data from specified sources at scheduled intervals (once a day).\n\n2. **Raw Data Entity (`raw_data_entity`)**:\n   - **Type**: EXTERNAL_SOURCES_PULL_BASED_RAW_DATA\n   - **Source**: ENTITY_EVENT\n   - **Description**: This entity stores the raw data that has been ingested by the data ingestion job.\n\n3. **Aggregated Data Entity (`aggregated_data_entity`)**:\n   - **Type**: SECONDARY_DATA\n   - **Source**: ENTITY_EVENT\n   - **Description**: This entity holds the aggregated data derived from the raw data for reporting purposes.\n\n4. **Report Entity (`report_entity`)**:\n   - **Type**: SECONDARY_DATA\n   - **Source**: ENTITY_EVENT\n   - **Description**: This entity contains the generated report that is sent to the admin via email.\n\n### Workflow Overview\n\nThe workflows in Cyoda define the processes tied to each job entity. They consist of transitions that specify how an entity changes its state as events occur. The `data_ingestion_job` includes the following transitions:\n\n- **Scheduled Data Ingestion**: This transition starts the data ingestion process based on a schedule.\n- **Aggregate Data**: After ingestion, this transition aggregates the raw data.\n- **Generate and Send Report**: Finally, this transition creates a report from the aggregated data and sends it to the admin's email.\n\n### Event-Driven Approach\n\nAn event-driven architecture allows the application to respond automatically to changes or triggers. In this specific requirement, the following events occur:\n\n1. **Data Ingestion**: The data ingestion job is triggered on a scheduled basis, automatically initiating the process of fetching data.\n2. **Data Aggregation**: Once data ingestion is complete, an event signals the need to aggregate the ingested data.\n3. **Report Generation and Sending**: After the aggregation is complete, another event triggers the report generation and subsequent emailing to the admin.\n\nThis approach promotes scalability and efficiency by allowing the application to handle each process step automatically without manual intervention.\n\n### Sequence Diagram\n\n```mermaid\nsequenceDiagram\n    participant User\n    participant Scheduler\n    participant Data Ingestion Job\n    participant Raw Data Entity\n    participant Aggregated Data Entity\n    participant Report Entity\n    participant Admin\n\n    User->>Scheduler: Schedule data ingestion job\n    Scheduler->>Data Ingestion Job: Trigger scheduled_data_ingestion\n    Data Ingestion Job->>Raw Data Entity: Ingest data\n    Raw Data Entity-->>Data Ingestion Job: Data ingested\n    Data Ingestion Job->>Aggregated Data Entity: Aggregate data\n    Aggregated Data Entity-->>Data Ingestion Job: Data aggregated\n    Data Ingestion Job->>Report Entity: Generate report\n    Report Entity-->>Data Ingestion Job: Report generated\n    Data Ingestion Job->>Admin: Send report\n```\n\n### Actors Involved\n\n- **User**: Initiates the scheduling of the data ingestion job.\n- **Scheduler**: Responsible for triggering the job at predefined times.\n- **Data Ingestion Job**: Central to managing the workflow of data processing.\n- **Raw Data Entity**: Stores the ingested raw data.\n- **Aggregated Data Entity**: Holds the aggregated data.\n- **Report Entity**: Contains the generated report.\n- **Admin**: Receives the report via email.\n\n## Conclusion\n\nThe Cyoda design aligns effectively with the requirements for creating a robust data processing application. By utilizing the event-driven model, the application can efficiently manage state transitions of each entity involved, from data ingestion to report delivery. The outlined entities, workflows, and events comprehensively cover the needs of the application, ensuring a smooth and automated process.\n\nThis PRD serves as a foundation for implementation and development, guiding the technical team through the specifics of the Cyoda architecture while providing clarity for users who may be new to the Cyoda framework."
    },