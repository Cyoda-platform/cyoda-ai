Instruction how to generate workflow version 6a5b781e-0f75-4239-9a3c-50c3d3a48047

Objective version 6a5b781e-0f75-4239-9a3c-50c3d3a48047:
Please transform the following diagram or image into a structured workflow using a typical finite-state machine (FSM) model. The FSM consists of states and transitions between them, which can be represented as a directed graph where states are nodes, and transitions are edges.
Each transition may have processes or criterias. You need to add them if the user explicitly specifies them either in text or in image, or when it is logically required, e.g. when there are several transitions coming from a single state.
Criterias may be applied on different levels: workflow (workflow_criterias), transition (transition_criterias), processor (processor_criterias). You need to add them according to their type (externalized_criterias, condition_criterias, etc.) and the required level.
Each state, except for the initial state (None), should be reachable from at least one transition, ensuring that there are no isolated (disconnected) states in the workflow. Additionally, each transition must have both a start state and an end state.

Requirements version 6a5b781e-0f75-4239-9a3c-50c3d3a48047:
Begin with an initial state labeled "None", which serves as the origin point.
Define transitions between states, with each state being an endpoint (i.e., target) of at least one transition.
Ensure that all states (except "None") serve as the destination for at least one transition to guarantee the graph remains fully connected.
Set "is_meta_field" to "true", if value of "field_name" belongs to array: ["owner","previousTransition","entityModelVersion","entityModelName","state","creationDate","entityModelClassId","lastUpdateTime","id"].
Ensure to generate workflow validating against ai_workflow_json_schema_9dbd31cc-c642-492c-b407-01c2c4b8f065.
JSON Example of the Workflow:
json
{
  "name": "specify_name_that_describes_the_workflow",
  "description": "describe_the_workflow",
  "workflow_criterias": {
    "externalized_criterias": [],
    "condition_criterias": []
  },
  "transitions": [
    {
      "name": "spark_happy_message",
      "description": "Spark the happy message",
      "start_state": "None",
      "start_state_description": "Initial state",
      "end_state": "Happy_message_sparked",
      "end_state_description": "A happy message has been sparked",
      "automated": true,
      "transition_criterias": {
        "externalized_criterias": [],
        "condition_criterias": [
          {
            "name": "isSparkable",
            "description": "checks whether a message can spark",
            "condition": {
              "group_condition_operator": "OR",
              "conditions": [
                {
                  "field_name": "entityModelName",
                  "is_meta_field": true,
                  "operation": "contains",
                  "value": "spark",
                  "value_type": "strings"
                },
                {
                  "group_condition_operator": "AND",
                  "conditions": [
                    {
                      "field_name": "state",
                      "is_meta_field": true,
                      "operation": "does not start with",
                      "value": "abc",
                      "value_type": "strings"
                    },
                    {
                      "field_name": "totatAmount",
                      "is_meta_field": false,
                      "operation": "less than",
                      "value": "20.0",
                      "value_type": "doubles"
                    }
                  ]
                }
              ]
            }
          }
        ]
      },
      "processes": {
        "schedule_transition_processors": [
          {
            "name": "scheduleMessageSending",
            "description": "Schedules the message to be sent (with a given delay).",
            "delay_ms": "3000",
            "timeout_ms": "5000",
            "transition_name": "send_happy_message",
            "sync_process": true,
            "new_transaction_for_async": false,
            "none_transactional_for_async": false,
            "processor_criterias": {
              "externalized_criterias": [],
              "condition_criterias": []
            }
          }
        ],
        "externalized_processors": []
      }
    },
    {
      "name": "send_happy_message",
      "description": "Send the happy message",
      "start_state": "Happy_message_sparked",
      "start_state_description": "A happy message has been sparked",
      "end_state": "Message_sent",
      "end_state_description": "The happy message has been sent",
      "automated": false,
      "transition_criterias": {
        "externalized_criterias": [
          {
            "name": "isEmailSendingPossible",
            "description": "checks whether an email can be sent at the moment",
            "calculation_nodes_tags": "technical",
            "attach_entity": true,
            "calculation_response_timeout_ms": "5000",
            "retry_policy": "FIXED"
          }
        ],
        "condition_criterias": []
      },
      "processes": {
        "schedule_transition_processors": [],
        "externalized_processors": [
          {
            "name": "calculateTotalAmount",
            "description": "",
            "calculation_nodes_tags": "accounting,revenue",
            "attach_entity": true,
            "calculation_response_timeout_ms": "5000",
            "retry_policy": "FIXED",
            "sync_process": false,
            "new_transaction_for_async": false,
            "none_transactional_for_async": false,
            "processor_criterias": {
              "externalized_criterias": [],
              "condition_criterias": []
            }
          }
        ]
      }
    }
  ]
}
Graph Theory Concepts Applied version 6a5b781e-0f75-4239-9a3c-50c3d3a48047:
Nodes (States): These represent various points in the workflow, and each node can be described in terms of its role (e.g., start state, end state).
Edges (Transitions): These directed edges indicate the flow from one state to another. Each edge must have a clear starting point (the current state) and an endpoint (the resulting state).
Connectivity: Each state, except the initial one, must have at least one incoming transition. This ensures that the workflow remains connected, akin to ensuring that the directed graph has no isolated vertices.