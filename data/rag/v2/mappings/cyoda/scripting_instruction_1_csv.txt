**Writing a JavaScript Nashorn script to map the given input to the given Cyoda target entity**

Instruction e31a2c74-4c85-4c3b-b0ab-3b0cd7a9fe58

Here's an example of how to map an Example_input to an entity with a Javascript Nashorn script:

Example_input:
Project Name,Types,Contact User,System Account,Project Date,Deadline Date,Deadline Length Days,Category,Awarded Value,Purchaser,Notice Name 1,Notice ID 1,Notice SID 1,Notice Date 1,Notice Type 1,Notice Src ID 1,Notice Src URL 1,Notice Data 1,Notice Name 2,Notice ID 2,Notice SID 2,Notice Date 2,Notice Type 2,Notice Src ID 2,Notice Src URL 2,Notice Data 2
Construction of New Office Building,"Construction, Development",John Doe,True,2024-03-28T12:00:00Z,2024-04-30T12:00:00Z,33,Construction Services,185000,ABC Corporation,Pre-Bid Conference,NW20240328002,S003,2024-03-28T12:00:00Z,Conference,SRC003,https://example.com/notice/NW20240328002,"Pre-bid conference scheduled on March 28th, 2024 at 2:00 PM to discuss project specifications.",Site Visit,NW20240328003,S004,2024-03-30T12:00:00Z,Visit,SRC004,https://example.com/notice/NW20240328003,"Mandatory site visit scheduled on March 30th, 2024 at 10:00 AM for all prospective contractors."
Renovation of Public Library,"Building, Maintenance",Jane Roe,False,2023-12-15T12:00:00Z,2024-01-15T12:00:00Z,31,Maintenance Services,190000,XYZ Industries,Post-Award Meeting,PR20231215001,S004,2023-12-15T12:00:00Z,Meeting,SRC004,https://example.org/notice/PR20231215001,"Post-award meeting scheduled on December 15th, 2023 at 3:00 PM to finalize contract details.",Project Inspection,PR20231215002,S005,2023-12-20T12:00:00Z,Inspection,SRC005,https://example.org/notice/PR20231215002,"Project inspection scheduled on December 20th, 2023 at 9:00 AM to evaluate work progress."

Example target entity model:
{
  "$": {
    "#.purchaserNoticeMap": "OBJECT",
    ".awardedValue": "DOUBLE",
    ".category": "STRING",
    ".contactUser": "STRING",
    ".date": "ZONED_DATE_TIME",
    ".deadlineDate": "ZONED_DATE_TIME",
    ".deadlineLengthDays": "INTEGER",
    ".employeeId": "TIME_UUID_TYPE",
    ".id": "STRING",
    ".name": "STRING",
    ".purchaser": "STRING",
    ".systemAccount": "BOOLEAN",
    ".types[*]": "(STRING x 1)"
  },
  "$.notices[*]": {
    "#": "ARRAY_ELEMENT",
    ".data": "STRING",
    ".date": "ZONED_DATE_TIME",
    ".id": "STRING",
    ".name": "STRING",
    ".sid": "STRING",
    ".srcId": "STRING",
    ".srcUrl": "STRING",
    ".type": "STRING"
  },
  "$.purchaserNoticeMap.Purchaser A[*]": {
    "#": "ARRAY_ELEMENT",
    ".data": "STRING",
    ".date": "ZONED_DATE_TIME",
    ".id": "STRING",
    ".name": "STRING",
    ".sid": "STRING",
    ".srcId": "STRING",
    ".srcUrl": "STRING",
    ".type": "STRING"
  }
}

Instruction e31a2c74-4c85-4c3b-b0ab-3b0cd7a9fe58

**Writing a JavaScript Nashorn script to map the given input to the given entity model** Instruction

Always start with:
var target = entity.modelAccessor;
then map fields
target.name = input['Project Name'] != null ? input['Project Name'] : "";
target.contactUser = input['Contact User'] != null ? input['Contact User'] : "";
target.systemAccount = input['System Account'] != null ? input['System Account'] : false;

var UUID = Java.type("java.util.UUID");
target.employeeId = input['Employee ID'] != null ? UUID.fromString(input['Employee ID']) : null;

How to handle collections.
Look through header field names of input to detect a pattern used in naming array elements and use the correct pattern from script examples in your output loop.
Choose between Pattern 1, 2 and 3.
Pattern 1: Field names contain a prefix, followed by an index. For example: "Notice Name 1", "Notice ID 1", "Notice Name 2", "Notice ID 2", etc.
Script example to be applied to Pattern 1:
```Javascript Nashorn
var i = 1;
while (input['Notice Name ' + i] != undefined) {
    var notice = {
        name: input['Notice Name ' + i] || "",
        id: input['Notice ID ' + i] || "",
        // Add other fields as needed
    };
    notices.add(notice);
    i++;
}
```

Pattern 2: Field names contain an index followed by a suffix. For example: "1 Notice Name", "1 Notice ID", "2 Notice Name", "2 Notice ID", etc.
Script example to be applied to Pattern 2:
```Javascript Nashorn
var i = 1;
while (input[i + ' Notice Name'] !== undefined) {
    var notice = {
        name: input[i + ' Notice Name'] || "",
        id: input[i + ' Notice ID'] || "",
        // Add other fields as needed
    };
    notices.add(notice);
    i++;
}
```

Pattern 3: Fields are named using underscores to separate the prefix and index. For example: "Notice_1_Name", "Notice_1_ID", "Notice_2_Name", "Notice_2_ID", etc.
Script example to be applied to Pattern 3:
```Javascript Nashorn
var i = 1;
while (input['Notice_' + i + '_Name'] !== undefined) {
    var notice = {
        name: input['Notice_' + i + '_Name'] || "",
        id: input['Notice_' + i + '_ID'] || "",
        // Add other fields as needed
    };
    notices.add(notice);
    i++;
}
```