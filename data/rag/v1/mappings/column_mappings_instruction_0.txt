## Column Mappings for AI Ingestion

Instruction how to produce column mappings for a target entity.
**Entity**
Here is an example target entity:
{
    "net.cyoda.saas.model.TenderEntity": {
      "name": "string",
      "types": [
        "string"
      ],
      "contactUser": "string",
      "systemAccount": true,
      "date": "string",
      "deadlineDate": "string",
      "deadlineLengthDays": 0,
      "category": "string",
      "awardedValue": 0.0,
      "purchaser": "string",
      "notices": [
        {
          "name": "string",
          "id": "string",
          "sid": "string",
          "date": "string",
          "type": "string",
          "srcId": "string",
          "srcUrl": "string",
          "data": "string"
        }
      ]
    }
  },

  {
    "net.cyoda.saas.model.Notice": {
        "name": "string",
        "id": "string",
        "sid": "string",
        "date": "string",
        "type": "string",
        "srcId": "string",
        "srcUrl": "string",
        "data": "string"
    }
}

**Input**
Here is an example data source response which will be used as our input.
{
  "name": "Construction of New Office Building",
  "types": [
    "Construction",
    "Development"
  ],
  "contactUser": "John Doe",
  "systemAccount": true,
  "date": "2024-03-28",
  "deadlineDate": "2024-04-30",
  "deadlineLengthDays": 33,
  "category": "Construction Services",
  "awardedValue": 185000,
  "purchaser": {
    "name":"ABC Corporation"
    },
  "notices": [
    {
      "name": "Pre-Bid Conference",
      "id": "NW20240328002",
      "sid": "S003",
      "date": "2024-03-28",
      "type": "Conference",
      "srcId": "SRC003",
      "srcUrl": "https://example.com/notice/NW20240328002",
      "data": "Pre-bid conference scheduled on March 28th, 2024 at 2:00 PM to discuss project specifications."
    },
    {
      "name": "AB Conference",
      "id": "NW32423423",
      "sid": "S004",
      "date": "2024-03-26",
      "type": "Conference",
      "srcId": "SRC003",
      "srcUrl": "https://example.com/notice/NW2022423423002",
      "data": "Project specifications."
    }
  ]
}

Let's map the input to the entity. 
Pay attention to the fact that only attributes from the target entity matter.
We look for semantically similar attrinutes in the input. And map input attributes to entity attributes.
For example, the input attribute "name" (srcColumnPath) is mapped to the entity attribute "name" (dstCyodaColumnPath).
For complex path use a forward slash instead of a dot. Example: "purchaser/name" and NOT purchaser.name. Do NOT use dots.
Transformers should be specified for each column according to the dst attribute data type.
Do NOT add column mappings for arrays. Only very simple cases. If you do not know - just do not add this column mapping.
Add column mappings only for those attributes that are present in the target entity.

This is how you should do mappings:
For example, a JSON input has a name attribute ("name": "Construction of New Office Building") and the Tender Entity has a name attribute as well.
First, let's find all attribute pairs that are semantically close:
name - name
contactUser - contactUser
types is an array - so skip it.
and so on.
So, you need to add a column mapping for name:
{
                    "srcColumnPath": "name",
                    "dstCyodaColumnPath": "name",
                    "dstCyodaColumnPathType": "java.lang.String",
                    "dstCollectionElementSetModes": [],
                    "transformer": {
                        "type": "COMPOSITE",
                        "children": [
                            {
                                "type": "SINGLE",
                                "transformerKey": "com.cyoda.plugins.mapping.core.parser.valuetransformers.SourceObjectValueTransformer$ToString",
                                "parameters": []
                            },
                            {
                                "type": "SINGLE",
                                "transformerKey": "com.cyoda.plugins.mapping.core.parser.valuetransformers.StringValueTransformer$Trim",
                                "parameters": []
                            }
                        ]
                    }
                },

Also an example of a complex path:
{
                    "srcColumnPath": "purchaser/name",
                    "dstCyodaColumnPath": "purchaser",
                    "dstCyodaColumnPathType": "java.lang.String",
                    "dstCollectionElementSetModes": [],
                    "transformer": {
                        "type": "COMPOSITE",
                        "children": [
                            {
                                "type": "SINGLE",
                                "transformerKey": "com.cyoda.plugins.mapping.core.parser.valuetransformers.SourceObjectValueTransformer$ToString",
                                "parameters": []
                            },
                            {
                                "type": "SINGLE",
                                "transformerKey": "com.cyoda.plugins.mapping.core.parser.valuetransformers.StringValueTransformer$Trim",
                                "parameters": []
                            }
                        ]
                    }
                },

For a list of available transformers look up column mappings transformers list.