For a list of available transformers look up column mappings transformers list.
**column mappings transformers list:**
Transformers should be used to map different data types. If you don't know what transformer to use - use this transformer:
 "transformer": {
                        "type": "COMPOSITE",
                        "children": []
                    }

For a `integer` data type, use $ToInt:

```json
{
  "type": "COMPOSITE",
  "children": [
    {
      "type": "SINGLE",
      "transformerKey": "com.cyoda.plugins.mapping.core.parser.valuetransformers.SourceObjectValueTransformer$ToInt",
      "parameters": []
    }
  ]
}

3. **Apply Necessary Transformers:** Always apply the necessary transformers for data types. For instance, if the destination data type is `double`, use the following transformer:

```json
{
  "type": "COMPOSITE",
  "children": [
    {
      "type": "SINGLE",
      "transformerKey": "com.cyoda.plugins.mapping.core.parser.valuetransformers.SourceObjectValueTransformer$ToDouble",
      "parameters": []
    }
  ]
}
```

For a `boolean` data type, use:

```json
{
  "type": "COMPOSITE",
  "children": [
    {
      "type": "SINGLE",
      "transformerKey": "com.cyoda.plugins.mapping.core.parser.valuetransformers.SourceObjectValueTransformer$ToBoolean",
      "parameters": []
    }
  ]
}
```
For a `integer` data type, use $ToInt:

```json
{
  "type": "COMPOSITE",
  "children": [
    {
      "type": "SINGLE",
      "transformerKey": "com.cyoda.plugins.mapping.core.parser.valuetransformers.SourceObjectValueTransformer$ToInt",
      "parameters": []
    }
  ]
}
```

**IMPORTANT:** The provided column mappings are generic templates. You will need to replace the placeholder values with actual values based on the input and target entity.

## Examples

Let's consider an example where we have the following input:

```json
{
  "name": "John Doe",
  "age": 30,
  "isActive": true
}
```

And the corresponding entity:

```json
{
  "fullName": "string",
  "age": "integer",
  "isActiveUser": "boolean"
}
```

Based on the semantically related attributes, we can create the following column mappings:

```json
{
  "srcColumnPath": "name",
  "dstCyodaColumnPath": "fullName",
  "dstCyodaColumnPathType": "java.lang.String",
  "dstCollectionElementSetModes": [],
  "transformer": {
    "type": "COMPOSITE",
    "children": [
      {
        "type": "SINGLE",
        "transformerKey": "com.cyoda.plugins.mapping.core.parser.valuetransformers.SourceObjectValueTransformer$ToString",
        "parameters": []
      },
      {
        "type": "SINGLE",
        "transformerKey": "com.cyoda.plugins.mapping.core.parser.valuetransformers.StringValueTransformer$Trim",
        "parameters": []
      }
    ]
  }
}
```

```json
{
  "srcColumnPath": "age",
  "dstCyodaColumnPath": "age",
  "dstCyodaColumnPathType": "java.lang.Integer",
  "dstCollectionElementSetModes": [],
  "transformer": {
    "type": "COMPOSITE",
    "children": [
      {
        "type": "SINGLE",
        "transformerKey": "com.cyoda.plugins.mapping.core.parser.valuetransformers.SourceObjectValueTransformer$ToInt",
        "parameters": []
      }
    ]
  }
}
```

```json
{
  "srcColumnPath": "isActive",
  "dstCyodaColumnPath": "isActiveUser",
  "dstCyodaColumnPathType": "java.lang.Boolean",
  "dstCollectionElementSetModes": [],
  "transformer": {
    "type": "COMPOSITE",
    "children": [
      {
        "type": "SINGLE",
        "transformerKey": "com.cyoda.plugins.mapping.core.parser.valuetransformers.SourceObjectValueTransformer$ToBoolean",
        "parameters": []
      }
    ]
  }
}
```

In this example, we have three column mappings, one for each attribute in the input that has a corresponding attribute in the entity. The `transformer` key is used to specify the appropriate transformer based on the data type of the destination attribute.

Remember, the actual transformer keys and parameters may vary depending on the specific requirements of your AI ingestion process. Always refer to the documentation or the source code for the most accurate information.


Continuing from the previous examples, let's consider the column mappings for integer, float, and bigint data types.

### Integer Mapping Example

For an integer attribute, the mapping would look like this:
PAY ATTENTION: it's "ToInt" and NOT ToInteger
**Expected: ToInt**
**Error: ToInteger**
```json
{
  "srcColumnPath": "integerAttribute",
  "dstCyodaColumnPath": "integerEntityAttribute",
  "dstCyodaColumnPathType": "java.lang.Integer",
  "dstCollectionElementSetModes": [],
  "transformer": {
    "type": "COMPOSITE",
    "children": [
      {
        "type": "SINGLE",
        "transformerKey": "com.cyoda.plugins.mapping.core.parser.valuetransformers.SourceObjectValueTransformer$ToInt",
        "parameters": []
      }
    ]
  }
}
```


```json
{
"type": "COMPOSITE",
"children": [
{
"type": "SINGLE",
"transformerKey": "com.cyoda.plugins.mapping.core.parser.valuetransformers.SourceObjectValueTransformer$ToInt",
"parameters": []
}
]
}
```
```
### Float Mapping Example

For a float attribute, the mapping would look like this:

```json
{
  "srcColumnPath": "floatAttribute",
  "dstCyodaColumnPath": "floatEntityAttribute",
  "dstCyodaColumnPathType": "java.lang.Float",
  "dstCollectionElementSetModes": [],
  "transformer": {
    "type": "COMPOSITE",
    "children": [
      {
        "type": "SINGLE",
        "transformerKey": "com.cyoda.plugins.mapping.core.parser.valuetransformers.SourceObjectValueTransformer$ToFloat",
        "parameters": []
      }
    ]
  }
}
```

### BigInt Mapping Example

For a bigint attribute, the mapping would look like this:

```json
{
  "srcColumnPath": "bigintAttribute",
  "dstCyodaColumnPath": "bigintEntityAttribute",
  "dstCyodaColumnPathType": "java.lang.Long",
  "dstCollectionElementSetModes": [],
  "transformer": {
    "type": "COMPOSITE",
    "children": [
      {
        "type": "SINGLE",
        "transformerKey": "com.cyoda.plugins.mapping.core.parser.valuetransformers.SourceObjectValueTransformer$ToLong",
        "parameters": []
      }
    ]
  }
}
```

In these examples, the `transformerKey` is used to specify the appropriate transformer based on the data type of the destination attribute. The `parameters` array can be used to pass additional parameters to the transformer if required.

Remember to replace `integerAttribute`, `floatAttribute`, `bigintAttribute`, `integerEntityAttribute`, `floatEntityAttribute`, and `bigintEntityAttribute` with the actual attribute names from your input and entity.